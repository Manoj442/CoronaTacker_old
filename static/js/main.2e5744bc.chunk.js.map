{"version":3,"sources":["Cards/cards.module.css","ChartComponents/googleCharts.module.css","App.module.css","Regions/States.module.css","Images/india.jpg","API/index.js","Cards/DataCards.js","Regions/States.js","ChartComponents/GooglePieChart.js","ChartComponents/HistoricChart.js","ChartComponents/BarChart.js","ChartComponents/StatewiseData.js","Cards/Headers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchNationalData","a","axios","all","get","data","console","log","DataCards","props","dataCard","Fragment","className","styles","cardDisplay","Card","noShadow","Object","keys","map","d","index","CardContent","key","individualContent","Typography","variant","align","active","confirmed","deaths","recovered","start","end","duration","separator","caseText","Regions","state","regions","regionalData","this","regionData","FormControl","countryDropdown","NativeSelect","onChange","e","changeRegion","target","value","region","Component","PieChart","pieChartDimension","Paper","elevation","width","height","chartType","loader","totalInfected","deceased","options","title","is3D","rootProps","DailyChart","activeSeries","chartData","activeCases","recoveredSeries","confirmedSeries","totalCases","deathSeries","categories","lastUpdatedAtApify","series","name","chart","type","dropShadow","enabled","color","top","left","blur","opacity","animations","easing","speed","animateGradually","delay","dynamicAnimation","theme","palette","dataLabels","stroke","curve","text","xaxis","responsive","breakpoint","plotOptions","bar","horizontal","legend","position","tooltip","x","format","apexLineChartDimension","StyledTableCell","withStyles","head","backgroundColor","common","black","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","StateTable","classes","TableContainer","tableContainer","component","Table","stickyheader","aria-label","TableHead","header","style","TableBody","row","scope","Headers","date","Date","lastUpdate","toDateString","toLocaleTimeString","titleDisplayer","alt","imageDisplayer","src","logo","App","cardData","nationalData","setCardData","dataType","Active","Deaths","Recovered","Confirmed","handleRegionChange","setState","filter","r","historicData","loading","sortedData","length","slice","sort","card","cardsAndDropDown","hasOwnProperty","deceasedArray","recoveredArray","ActiveArray","confirmedArray","margin","LinearProgress","tableAndDropDown","HistoricChart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e5744bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"cards_active__3NyKv\",\"deaths\":\"cards_deaths__248gK\",\"recovered\":\"cards_recovered__1H3TB\",\"confirmed\":\"cards_confirmed__1ZKax\",\"dontShow\":\"cards_dontShow__2-_bU\",\"titleDisplayer\":\"cards_titleDisplayer__2zkc8\",\"caseText\":\"cards_caseText__8qk5Y\",\"cardDisplay\":\"cards_cardDisplay__ig7La\",\"individualContent\":\"cards_individualContent__B5Q37\",\"noShadow\":\"cards_noShadow__2BU7h\",\"imageDisplayer\":\"cards_imageDisplayer__2wuOs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChartDimension\":\"googleCharts_lineChartDimension__3yOBq\",\"pieChartDimension\":\"googleCharts_pieChartDimension__32CX5\",\"apexLineChartDimension\":\"googleCharts_apexLineChartDimension__2d1JA\",\"tableContainer\":\"googleCharts_tableContainer__-dAV2\",\"table\":\"googleCharts_table__o0p5o\",\"circularChart\":\"googleCharts_circularChart__2NuFp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableAndDropDown\":\"App_tableAndDropDown__2TBa5\",\"cardsAndDropDown\":\"App_cardsAndDropDown__NA-HC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryDropdown\":\"States_countryDropdown__2Dqsw\"};","module.exports = __webpack_public_path__ + \"static/media/india.ef1e27ae.jpg\";","import axios from 'axios';\r\nconst url='https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true';\r\nconst historicUrl='https://api.apify.com/v2/datasets/58a4VXwBBF0HtxuQa/items?format=json&clean=1';\r\n//'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchNationalData=async()=>{\r\n    try{\r\n    const data= await axios.all([axios.get(url),axios.get(historicUrl)]) ;\r\n    console.log(data[0].data);\r\n    console.log(data[1].data)\r\n    return data;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }    \r\n}\r\n// export const fetchHistoricData=async()=>{\r\n//     try{\r\n//     const constHistoricData = await axios.get(historicUrl);\r\n//     console.log(constHistoricData);\r\n//     return constHistoricData;\r\n\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n// export const fetchDate=async(country)=>{\r\n//     let changeableUrl=url;\r\n//     if(country){\r\n//         changeableUrl=`${url}/countries/${country}`;\r\n//     }\r\n//     try{\r\n//         const {data:{confirmed,deaths,recovered,lastUpdate}}=await axios.get(changeableUrl);\r\n//         const modifiedData={\r\n//             confirmed,\r\n//             deaths,\r\n//             recovered,lastUpdate\r\n//         }\r\n//         console.log(modifiedData)\r\n//         return modifiedData;\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n\r\n// export const fetchCountries=async()=>{\r\n//     const countryUrl=`${url}/countries`;\r\n//  const {data:{countries}}=await axios.get(countryUrl);\r\n//  return countries.map((country)=>country.name);\r\n//  //console.log(countries);\r\n// }\r\n// export const fetchDailyData=async()=>{\r\n//     const dailyDataUrl=`${url}/daily`;\r\n//  const dailyData=await axios.get(dailyDataUrl);\r\n//  console.log(dailyData);\r\n//  return dailyData.data.map((d)=>({\r\n//      confirmed:d.confirmed.total,\r\n//     deaths:d.deaths.total,\r\n//     date:d.reportDate}));\r\n// }\r\n\r\n\r\n","import React from 'react';\r\nimport {Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css';\r\nconst DataCards =(props)=>{ \r\n  const data=props.data;                \r\n      const dataCard =  \r\n      <React.Fragment>       \r\n        <div className={styles.cardDisplay}>\r\n        <Card className={styles.noShadow}>\r\n        {Object.keys(data).map((d,index)=>( \r\n      <CardContent key={index} className={styles.individualContent}>                     \r\n        <Typography variant=\"h5\" align=\"center\">\r\n        <CountUp className={d === 'Active' ? styles.active : d === 'Confirmed' ? styles.confirmed : \r\n        d === 'Deaths' ? styles.deaths : styles.recovered} start={0} \r\n        end={data[`${d}`]} duration = {3} separator=\",\"/>\r\n          </Typography>\r\n          <Typography variant=\"overline\" align=\"center\" className={styles.caseText}>\r\n          {d} \r\n        </Typography>          \r\n      </CardContent>))}     \r\n    </Card>\r\n    </div>              \r\n      </React.Fragment>\r\n    return(\r\n      <React.Fragment>{dataCard}</React.Fragment>)\r\n}\r\nexport default DataCards;","import React, {Component} from 'react';\r\nimport {FormControl, NativeSelect, Typography} from '@material-ui/core';\r\nimport styles from './../Regions/States.module.css';\r\nclass Regions extends Component{  \r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        regions:[]\r\n    }\r\n}\r\n    render(){\r\n        const data=this.props.data;\r\n        const regionalData=data.regionData;       \r\n        return(\r\n            <FormControl className={styles.countryDropdown}>\r\n                <Typography variant=\"subtitle1\">\r\n                Select a Region:\r\n                </Typography>\r\n                <NativeSelect onChange={(e)=>this.props.changeRegion(e.target.value)}>\r\n                    <option value=\"National\">National</option>\r\n                    {regionalData.map((data,index)=>{\r\n                        return <option key={index} value={data.region}>{data.region}</option>\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>)\r\n}\r\n}\r\nexport default Regions;","import React, { Component } from 'react';\r\nimport {Chart} from 'react-google-charts';\r\nimport {Paper} from '@material-ui/core';\r\nimport styles from './googleCharts.module.css';\r\n//import styles from './../Charts/GoogleCharts/googleCharts.module.css';\r\nclass PieChart extends Component{\r\n    render(){\r\n      //console.log(this.props.regionData);\r\n      const regionalData=this.props.regionData;         \r\n        return <div className={styles.pieChartDimension}><Paper elevation={5}><Chart \r\n          width={'500px'}\r\n          height={'300px'}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            ['Cases', 'Numbers'],\r\n            ['Active', regionalData[0].totalInfected],\r\n            ['Deaths', regionalData[0].deceased],\r\n            ['Recovered', regionalData[0].recovered]   \r\n          ]}\r\n          options={{\r\n            title: `Current status in ${this.props.region}`,\r\n            is3D: true,\r\n          }}\r\n          rootProps={{ 'data-testid': '2' }}\r\n        /></Paper>\r\n        </div>\r\n    }\r\n}\r\nexport default PieChart;","import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport {Paper} from '@material-ui/core';\r\nclass DailyChart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        //console.log(props.chartData);\r\n        const activeSeries=props.chartData.map(({activeCases})=>activeCases);\r\n        const recoveredSeries=props.chartData.map(({recovered})=>recovered);\r\n        const confirmedSeries=props.chartData.map(({totalCases})=>totalCases);\r\n        const deathSeries=props.chartData.map(({deaths})=>deaths);\r\n        const categories=props.chartData.map(({lastUpdatedAtApify})=>lastUpdatedAtApify);\r\n        this.state = {          \r\n            series: [{\r\n              name: 'Active',\r\n              data: activeSeries\r\n            }, {\r\n              name: 'Recovered',\r\n              data: recoveredSeries\r\n            },\r\n            {\r\n                name: 'Confirmed',\r\n                data: confirmedSeries\r\n              },\r\n              {\r\n                name: 'Deaths',\r\n                data: deathSeries\r\n              },\r\n        ],\r\n            options: {\r\n              chart: {\r\n                height: '50%',\r\n                width:'50%',\r\n                type: 'line',\r\n                dropShadow: {\r\n                    enabled: true,\r\n                    color: '#000',\r\n                    top: 18,\r\n                    left: 7,\r\n                    blur: 10,\r\n                    opacity: 0.2\r\n                  },\r\n                  animations: {\r\n                    enabled: true,\r\n                    easing: 'easeinout',\r\n                    speed: 800,\r\n                    animateGradually: {\r\n                        enabled: true,\r\n                        delay: 150\r\n                    },\r\n                    dynamicAnimation: {\r\n                        enabled: true,\r\n                        speed: 350\r\n                    }\r\n                }\r\n              },\r\n              theme: {\r\n                palette: 'palette1' \r\n              },\r\n              dataLabels: {\r\n                enabled: false\r\n              },\r\n              stroke: {\r\n                curve: 'straight'              \r\n              },\r\n              title: {\r\n                text: 'Daily Count'\r\n              },\r\n              xaxis: {\r\n                type: 'datetime',\r\n                categories: categories\r\n              },             \r\n              responsive: [\r\n                {\r\n                  breakpoint: 1000,\r\n                  options: {\r\n                    plotOptions: {\r\n                      bar: {\r\n                        horizontal: false\r\n                      }\r\n                    },\r\n                    legend: {\r\n                      position: \"bottom\"\r\n                    }\r\n                  }\r\n                }\r\n              ],\r\n              tooltip: {\r\n                x: {\r\n                  format: 'dd/MM/yy HH:mm'\r\n                },\r\n              },\r\n            },\r\n          \r\n          \r\n          };\r\n    }\r\n    render(){\r\n        return <div className={styles.apexLineChartDimension}>\r\n            <Paper elevation={5}><Chart options={this.state.options} series={this.state.series} \r\n        type=\"line\"/>\r\n        </Paper>\r\n        </div>\r\n    }\r\n}\r\nexport default DailyChart;","import React, { Component } from 'react'\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport {Paper} from '@material-ui/core';\r\nclass BarChart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        //console.log(props.data.regionData);\r\n        const data = this.props.chartData;        \r\n        const categories=this.props.data.regionData.map(({region})=>region); \r\n        const colors = this.props.title === 'Deaths' ? ['#FF4500'] : \r\n        this.props.title === 'Recovered' ? ['lawngreen'] : \r\n        this.props.title === 'Active' ? ['#FFD700'] :\r\n        this.props.title === 'Confirmed'? ['cornflowerblue'] :[]\r\n        //console.log(data);\r\n        const name='' ;  \r\n        this.state = {          \r\n            series: [{\r\n              name:name,\r\n              data: data\r\n            }],\r\n            options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 1000,\r\n                stacked: true,\r\n                dropShadow: {\r\n                  enabled: true,\r\n                  color: '#000',\r\n                  top: 18,\r\n                  left: 7,\r\n                  blur: 10,\r\n                  opacity: 0.2\r\n                },                \r\n              },\r\n              legend:{\r\n                show:true,\r\n                showForNullSeries: true,\r\n                showForZeroSeries: true,\r\n                inverseOrder:true\r\n              },              \r\n              plotOptions: {\r\n                bar: {\r\n                  horizontal: true,\r\n                },                \r\n              },\r\n              dataLabels: {\r\n                enabled: false\r\n              },\r\n              title: {\r\n                text: `${this.props.title} count across the states`\r\n              },\r\n              xaxis: {\r\n                categories: categories,                \r\n              },                          \r\n              fill:{\r\n                colors:colors\r\n              }            \r\n            },                    \r\n          }; \r\n    }       \r\n    render(){        \r\n        return <div className={styles.apexLineChartDimension}>\r\n        <Paper elevation={5}><Chart options={this.state.options} series={this.state.series} type=\"bar\" \r\n        height={800} />\r\n        </Paper>                    \r\n        </div>\r\n    }\r\n}\r\nexport default BarChart;","import React from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from './googleCharts.module.css';\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  }  \r\n});\r\n\r\nexport default function StateTable(props) {\r\n  const classes = useStyles();\r\n const data = props.data.regionData;\r\n const headers=['State','Active','Deaths','Recovered','Confirmed']\r\n console.log(data.regionData);\r\n  return (          \r\n    <TableContainer className={styles.tableContainer} component={Paper}>\r\n      <Table stickyheader className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n              {\r\n                  headers.map((header,index)=>{\r\n                  return <StyledTableCell align=\"center\" style={{width:'15%'}} key={index}>{header}</StyledTableCell>})\r\n              }           \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>            \r\n          {data.map((row,index) => (\r\n            <StyledTableRow key={index}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.region}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalInfected}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.deceased}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.recovered}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalCases}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>    \r\n  );\r\n}","import React,{Component,Fragment} from 'react';\r\nimport {Typography} from '@material-ui/core';\r\nimport styles from './../Cards/cards.module.css';\r\nimport logo from './../Images/india.jpg';\r\nclass Headers extends Component {\r\n    render() {\r\n        const props=this.props;\r\n        const date= new Date(props.lastUpdate).toDateString() + ' ' +new Date(props.lastUpdate).toLocaleTimeString();        \r\n        return (  \r\n            <Fragment>    \r\n                <Typography className={styles.titleDisplayer} variant=\"h3\"> \r\n                <img alt=\"India\" className={styles.imageDisplayer} src={logo} /> COVID-19 DASHBOARD        \r\n                </Typography><br/>\r\n                <Typography align=\"center\">\r\n                {props.lastUpdate ? date : null}\r\n                </Typography> \r\n            </Fragment>                            \r\n        )\r\n    }\r\n}\r\nexport default Headers;\r\n","import React, {Component} from 'react';\r\n//import logo from './logo.svg';\r\nimport styles from './App.module.css';\r\nimport {fetchNationalData} from './API/index';\r\nimport DataCards from './Cards/DataCards';\r\nimport Regions from './Regions/States';\r\nimport PieChart from './ChartComponents/GooglePieChart';\r\nimport HistoricChart from './ChartComponents/HistoricChart';\r\nimport CircularChart from './ChartComponents/CircularChart';\r\nimport BarChart from './ChartComponents/BarChart';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport StateTable from './ChartComponents/StatewiseData';\r\nimport Headers from './Cards/Headers';\r\n//import axios from 'axios';\r\nclass App extends Component{ \r\n  cardData={};\r\n  nationalData={};\r\n  lastUpdate='';\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      data:{},\r\n      region:'',\r\n      regionData:{},\r\n      historicData:[],\r\n      loading:true,\r\n      cardData:{},\r\n      lastUpdate:''\r\n      }\r\n    }    \r\n  async componentDidMount(){\r\n    const data=await fetchNationalData();\r\n    //console.log(data);   \r\n    this.nationalData=data[0].data;\r\n    this.lastUpdate = data[0].data.lastUpdatedAtApify;\r\n    //console.log(this.nationalData);\r\n    this.setCardData(this.nationalData,'National');\r\n    var sortedData=[];\r\n    if(data[1].data.length){      \r\n      sortedData=[...data[1].data].slice().sort();\r\n      //console.log(sortedData);\r\n    }       \r\n    this.setState(\r\n      {\r\n        data:data[0].data,\r\n        historicData:sortedData,\r\n        loading:false,\r\n        cardData:this.cardData,\r\n        lastUpdate:this.lastUpdate\r\n      });\r\n  }\r\n  setCardData=(data,dataType)=>{\r\n    if(dataType === 'National'){\r\n      this.cardData = {\r\n        Active:data.activeCases,\r\n        Deaths:data.deaths,\r\n        Recovered:data.recovered,\r\n        Confirmed:data.totalCases\r\n      }\r\n    }\r\n    else{\r\n      this.cardData = {\r\n        Active:data[0].totalInfected,\r\n        Deaths:data[0].deceased,\r\n        Recovered:data[0].recovered,\r\n        Confirmed:data[0].totalCases\r\n      }\r\n\r\n    }    \r\n  }\r\n  handleRegionChange=(region)=>{    \r\n    if(region === \"National\"){\r\n      this.setCardData(this.nationalData,region);\r\n      this.setState({\r\n        regionData:{},\r\n        cardData:this.cardData\r\n      })\r\n    }\r\n    else{\r\n      const prevData=this.state.data.regionData;\r\n      const regionData = prevData.filter(r=>r.region === region);       \r\n      this.setCardData(regionData,region);    \r\n      this.setState({\r\n        regionData:regionData,\r\n        region:region,\r\n        cardData:this.cardData\r\n      })\r\n    }   \r\n  }\r\n  render(){     \r\n    const card= this.state.data.activeCases ? <div className={styles.cardsAndDropDown}><DataCards lastUpdate={this.state.lastUpdate}\r\n    data={this.state.cardData}/>\r\n     { this.state.data.hasOwnProperty('regionData')?\r\n        <Regions data={this.state.data} changeRegion={this.handleRegionChange}/>:\r\n        null\r\n        }</div>:null;\r\n    const deceasedArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({deceased})=>deceased):[];\r\n    const recoveredArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({recovered})=>recovered):[];\r\n    const ActiveArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({totalInfected})=>totalInfected):[];\r\n    const confirmedArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({totalCases})=>totalCases):[];\r\n    const lineChartArray=this.state.data.hasOwnProperty('regionData') ?{\r\n      Deaths:deceasedArray,\r\n      Recovered:recoveredArray,\r\n      Active:ActiveArray,\r\n      Confirmed:confirmedArray\r\n    }:{};\r\n    console.log(styles);\r\n    return(\r\n      <div>\r\n         <Headers lastUpdate={this.state.lastUpdate}/> \r\n        {this.state.loading ? <div style={{margin:'3%'}}><br/>Loading Please wait...<br/><LinearProgress color=\"secondary\" /></div> : null}               \r\n          {card}                      \r\n        {\r\n           this.state.data.hasOwnProperty('regionData')? \r\n          <div className={styles.tableAndDropDown}>\r\n            <StateTable data={this.state.data}/>\r\n            {Object.keys(this.state.regionData).length ?        \r\n            <PieChart regionData={this.state.regionData} \r\n              region={this.state.region}/> : null}\r\n               {          \r\n          this.state.historicData.length && !Object.keys(this.state.regionData).length ? \r\n          <HistoricChart chartData={this.state.historicData}/> : null\r\n        }        \r\n          </div>:null\r\n        }                                      \r\n        <br/>       \r\n        <br/>\r\n        {/* {\r\n          this.state.data.hasOwnProperty('regionData') && !Object.keys(this.state.regionData).length?\r\n          Object.keys(lineChartArray).map((d,index)=>\r\n          <React.Fragment>\r\n          <BarChart key={index} \r\n          title={d}\r\n          chartData={lineChartArray[`${d}`]} data={this.state.data}/><br/><br/>\r\n          </React.Fragment>):null\r\n            }                                           */}\r\n      </div>      \r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import 'semantic-ui-css/semantic.min.css';\r\nReactDOM.render(\r\n  \r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}