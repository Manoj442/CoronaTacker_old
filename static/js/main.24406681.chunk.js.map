{"version":3,"sources":["ChartComponents/googleCharts.module.css","App.module.css","Regions/States.module.css","Images/india.jpg","API/index.js","Cards/DataCards.js","Regions/States.js","ChartComponents/DonutGradientChart.js","ChartComponents/HistoricChart.js","ChartComponents/StatewiseData.js","Cards/Headers.js","App.js","serviceWorker.js","index.js","Cards/cards.module.css"],"names":["module","exports","fetchNationalData","a","axios","all","get","data","console","log","DataCards","props","dataCard","Fragment","className","styles","cardDisplay","Card","noShadow","Object","keys","map","d","index","CardContent","key","individualContent","Typography","variant","align","active","confirmed","deaths","recovered","start","end","duration","separator","caseText","Regions","state","regions","regionalData","this","regionData","FormControl","countryDropdown","NativeSelect","onChange","e","changeRegion","target","value","region","Component","DonutGradientChart","series","Active","Deaths","Recovered","labels","options","chart","width","type","fill","filter","label","title","text","dataLabels","enabled","theme","mode","palette","legend","formatter","val","opts","w","globals","seriesIndex","responsive","breakpoint","position","donutChart","Paper","elevation","height","DailyChart","name","chartData","activeCases","totalCases","dropShadow","color","top","left","blur","opacity","animations","easing","speed","animateGradually","delay","dynamicAnimation","stroke","curve","xaxis","categories","lastUpdatedAtApify","plotOptions","bar","horizontal","tooltip","x","format","apexLineChartDimension","StyledTableCell","withStyles","head","backgroundColor","common","black","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","StateTable","classes","TableContainer","tableContainer","component","Table","aria-label","TableHead","header","style","TableBody","row","scope","totalInfected","deceased","Headers","date","Date","lastUpdate","toDateString","toLocaleTimeString","titleDisplayer","alt","imageDisplayer","src","logo","App","cardData","nationalData","historicData","regionHistoricData","fetchRegHistoricData","retrievedRegionData","rd","regData","undefined","setCardData","dataType","Confirmed","handleRegionChange","setState","r","loading","sortedData","length","slice","sort","card","cardsAndDropDown","hasOwnProperty","margin","LinearProgress","tableAndDropDown","display","HistoricChart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.24406681.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChartDimension\":\"googleCharts_lineChartDimension__3yOBq\",\"pieChartDimension\":\"googleCharts_pieChartDimension__32CX5\",\"apexLineChartDimension\":\"googleCharts_apexLineChartDimension__2d1JA\",\"tableContainer\":\"googleCharts_tableContainer__-dAV2\",\"table\":\"googleCharts_table__o0p5o\",\"donutChart\":\"googleCharts_donutChart__3IiwK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableAndDropDown\":\"App_tableAndDropDown__2TBa5\",\"cardsAndDropDown\":\"App_cardsAndDropDown__NA-HC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryDropdown\":\"States_countryDropdown__2Dqsw\"};","module.exports = __webpack_public_path__ + \"static/media/india.ef1e27ae.jpg\";","import axios from 'axios';\r\nconst url='https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true';\r\nconst historicUrl='https://api.apify.com/v2/datasets/58a4VXwBBF0HtxuQa/items?format=json&clean=1';\r\n//'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchNationalData=async()=>{\r\n    try{\r\n    const data= await axios.all([axios.get(url),axios.get(historicUrl)]) ;\r\n    console.log(data[0].data);\r\n    console.log(data[1].data)\r\n    return data;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }    \r\n}\r\n// export const fetchHistoricData=async()=>{\r\n//     try{\r\n//     const constHistoricData = await axios.get(historicUrl);\r\n//     console.log(constHistoricData);\r\n//     return constHistoricData;\r\n\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n// export const fetchDate=async(country)=>{\r\n//     let changeableUrl=url;\r\n//     if(country){\r\n//         changeableUrl=`${url}/countries/${country}`;\r\n//     }\r\n//     try{\r\n//         const {data:{confirmed,deaths,recovered,lastUpdate}}=await axios.get(changeableUrl);\r\n//         const modifiedData={\r\n//             confirmed,\r\n//             deaths,\r\n//             recovered,lastUpdate\r\n//         }\r\n//         console.log(modifiedData)\r\n//         return modifiedData;\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n\r\n// export const fetchCountries=async()=>{\r\n//     const countryUrl=`${url}/countries`;\r\n//  const {data:{countries}}=await axios.get(countryUrl);\r\n//  return countries.map((country)=>country.name);\r\n//  //console.log(countries);\r\n// }\r\n// export const fetchDailyData=async()=>{\r\n//     const dailyDataUrl=`${url}/daily`;\r\n//  const dailyData=await axios.get(dailyDataUrl);\r\n//  console.log(dailyData);\r\n//  return dailyData.data.map((d)=>({\r\n//      confirmed:d.confirmed.total,\r\n//     deaths:d.deaths.total,\r\n//     date:d.reportDate}));\r\n// }\r\n\r\n\r\n","import React from 'react';\r\nimport {Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css';\r\nconst DataCards =(props)=>{ \r\n  const data=props.data;                \r\n      const dataCard =  \r\n      <React.Fragment>       \r\n        <div className={styles.cardDisplay}>\r\n        <Card className={styles.noShadow}>\r\n        {Object.keys(data).map((d,index)=>( \r\n      <CardContent key={index} className={styles.individualContent}>                     \r\n        <Typography variant=\"h5\" align=\"center\">\r\n        <CountUp className={d === 'Active' ? styles.active : d === 'Confirmed' ? styles.confirmed : \r\n        d === 'Deaths' ? styles.deaths : styles.recovered} start={0} \r\n        end={data[`${d}`]} duration = {3} separator=\",\"/>\r\n          </Typography>\r\n          <Typography variant=\"overline\" align=\"center\" className={styles.caseText}>\r\n          {d} \r\n        </Typography>          \r\n      </CardContent>))}     \r\n    </Card>\r\n    </div>              \r\n      </React.Fragment>\r\n    return(\r\n      <React.Fragment>{dataCard}</React.Fragment>)\r\n}\r\nexport default DataCards;","import React, {Component} from 'react';\r\nimport {FormControl, NativeSelect, Typography} from '@material-ui/core';\r\nimport styles from './../Regions/States.module.css';\r\nclass Regions extends Component{  \r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        regions:[]\r\n    }\r\n}\r\n    render(){\r\n        const data=this.props.data;\r\n        const regionalData=data.regionData;       \r\n        return(\r\n            <FormControl className={styles.countryDropdown}>\r\n                <Typography variant=\"subtitle1\">\r\n                Select a Region:\r\n                </Typography>\r\n                <NativeSelect onChange={(e)=>this.props.changeRegion(e.target.value)}>\r\n                    <option value=\"National\">National</option>\r\n                    {regionalData.map((data,index)=>{\r\n                        return <option key={index} value={data.region}>{data.region}</option>\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>)\r\n}\r\n}\r\nexport default Regions;","import React from 'react'\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport { Paper } from '@material-ui/core';\r\nconst DonutGradientChart=(props)=>{  \r\n    var series=[props.data.Active, props.data.Deaths, props.data.Recovered];\r\n    var labels=Object.keys(props.data);\r\n    labels=labels.filter((label)=>label !== 'Confirmed');    \r\n    const options={\r\n        chart: {\r\n          width: 380,\r\n          type: 'donut'\r\n        },\r\n        fill:{\r\n          type:'gradient'\r\n        },\r\n        labels: labels,  \r\n        title: {\r\n          text: 'Current Statistics'\r\n        },                   \r\n        dataLabels: {\r\n          enabled: true\r\n        },theme: {\r\n          mode: 'light', \r\n          palette: 'palette1'         ,\r\n      }\r\n        ,       \r\n        legend: {\r\n          formatter: function(val, opts) {\r\n            return val + \" - \" + opts.w.globals.series[opts.seriesIndex]\r\n          }\r\n        },\r\n        responsive: [{\r\n          breakpoint: 480,\r\n          options: {\r\n            chart: {\r\n              width: 200\r\n            },\r\n            legend: {\r\n              position: 'bottom'\r\n            }\r\n          }\r\n        }]\r\n      }\r\n      return(  \r\n            <div className={styles.donutChart}> \r\n            <Paper elevation={10}>            \r\n            <Chart options={options} series={series} type=\"donut\" \r\n        height={300} width={500}/>\r\n        </Paper>\r\n        </div>\r\n        )\r\n}\r\nexport default DonutGradientChart\r\n","import React from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport {Paper} from '@material-ui/core';\r\n\r\nconst DailyChart=(props)=>{\r\n    const activeSeries=props.chartData.map(({activeCases})=>activeCases);\r\n    const recoveredSeries=props.chartData.map(({recovered})=>recovered);\r\n    const confirmedSeries=props.chartData.map(({totalCases})=>totalCases);\r\n    const deathSeries=props.chartData.map(({deaths})=>deaths);\r\n    const categories=props.chartData.map(({lastUpdatedAtApify})=>lastUpdatedAtApify);\r\n    const series = [{ name: 'Active',data: activeSeries}, \r\n                    { name: 'Recovered',data: recoveredSeries},\r\n                    { name: 'Confirmed',data: confirmedSeries},\r\n                    { name: 'Deaths', data: deathSeries}];\r\n    const options = {\r\n      chart: {\r\n        height: '50%',\r\n        width:'50%',\r\n        type: 'line',\r\n        dropShadow: {\r\n            enabled: true,\r\n            color: '#000',\r\n            top: 18,\r\n            left: 7,\r\n            blur: 10,\r\n            opacity: 0.2\r\n          },\r\n          animations: {\r\n            enabled: true,\r\n            easing: 'easeinout',\r\n            speed: 800,\r\n            animateGradually: {\r\n                enabled: true,\r\n                delay: 150\r\n            },\r\n            dynamicAnimation: {\r\n                enabled: true,\r\n                speed: 350\r\n            }\r\n        }\r\n      },\r\n      theme: {\r\n        palette: 'palette1' \r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'straight'              \r\n      },\r\n      title: {\r\n        text: 'Daily Count'\r\n      },\r\n      xaxis: {\r\n        type: 'datetime',\r\n        categories: categories\r\n      },             \r\n      responsive: [\r\n        {\r\n          breakpoint: 1000,\r\n          options: {\r\n            plotOptions: {\r\n              bar: {\r\n                horizontal: false\r\n              }\r\n            },\r\n            legend: {\r\n              position: \"bottom\"\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      tooltip: {\r\n        x: {\r\n          format: 'dd/MM/yy HH:mm'\r\n        },\r\n      },\r\n    }\r\n    return(<div className={styles.apexLineChartDimension}>\r\n            <Paper elevation={10}><Chart options={options} series={series} \r\n        type=\"line\"/>\r\n        </Paper>\r\n        </div>)\r\n}\r\nexport default DailyChart;","import React from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from './googleCharts.module.css';\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  }  \r\n});\r\n\r\nexport default function StateTable(props) {\r\n const classes = useStyles();\r\n const data = props.data.regionData;\r\n const headers=['State','Active','Deaths','Recovered','Confirmed']\r\n console.log(data.regionData);\r\n  return (          \r\n    <TableContainer className={styles.tableContainer} component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n              {\r\n                  headers.map((header,index)=>{\r\n                  return <StyledTableCell align=\"center\" style={{width:'15%'}} key={index}>{header}</StyledTableCell>})\r\n              }           \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>            \r\n          {data.map((row,index) => (\r\n            <StyledTableRow key={index}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.region}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalInfected}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.deceased}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.recovered}</StyledTableCell>\r\n              <StyledTableCell align=\"center\">{row.totalCases}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>    \r\n  );\r\n}","import React,{Component,Fragment} from 'react';\r\nimport {Typography} from '@material-ui/core';\r\nimport styles from './../Cards/cards.module.css';\r\nimport logo from './../Images/india.jpg';\r\nclass Headers extends Component {\r\n    render() {\r\n        const props=this.props;\r\n        const date= new Date(props.lastUpdate).toDateString() + ' ' +new Date(props.lastUpdate).toLocaleTimeString();        \r\n        return (  \r\n            <Fragment>    \r\n                <Typography className={styles.titleDisplayer} variant=\"h3\"> \r\n                <img alt=\"India\" className={styles.imageDisplayer} src={logo} /> COVID-19 DASHBOARD        \r\n                </Typography><br/>\r\n                <Typography align=\"center\">\r\n                {props.lastUpdate ? date : null}\r\n                </Typography> \r\n            </Fragment>                            \r\n        )\r\n    }\r\n}\r\nexport default Headers;\r\n","import React, {Component} from 'react';\r\n//import logo from './logo.svg';\r\nimport styles from './App.module.css';\r\nimport {fetchNationalData} from './API/index';\r\nimport DataCards from './Cards/DataCards';\r\nimport Regions from './Regions/States';\r\nimport DonutGradientChart from './ChartComponents/DonutGradientChart';\r\nimport HistoricChart from './ChartComponents/HistoricChart';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport StateTable from './ChartComponents/StatewiseData';\r\nimport Headers from './Cards/Headers';\r\n//import axios from 'axios';\r\nclass App extends Component{ \r\n  cardData={};\r\n  nationalData={};\r\n  lastUpdate='';\r\n  historicData=[];\r\n  regionHistoricData=[];\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      data:{},\r\n      region:'',\r\n      regionData:{},\r\n      historicData:[],\r\n      loading:true,\r\n      cardData:{},\r\n      lastUpdate:'',\r\n      regionHistoricData:[]\r\n      }\r\n    }    \r\n  async componentDidMount(){\r\n    const data=await fetchNationalData();\r\n    //console.log(data);   \r\n    this.nationalData=data[0].data;\r\n    this.lastUpdate = data[0].data.lastUpdatedAtApify;\r\n    //console.log(this.nationalData);\r\n    this.setCardData(this.nationalData,'National');\r\n    this.fetchRegHistoricData(data[1].data);\r\n    var sortedData=[];\r\n    if(data[1].data.length){      \r\n      sortedData=[...data[1].data].slice().sort();\r\n      //console.log(sortedData);\r\n    }       \r\n    this.setState(\r\n      {\r\n        data:data[0].data,\r\n        historicData:sortedData,\r\n        loading:false,\r\n        cardData:this.cardData,\r\n        lastUpdate:this.lastUpdate\r\n      });\r\n  }\r\n  fetchRegHistoricData=(regionalData)=>{\r\n    console.log(regionalData);\r\n    let retrievedRegionData=[];   \r\n    regionalData.map((rd,index)=>{\r\n      retrievedRegionData[index]={\r\n        regionData:rd.regionData,\r\n        lastUpdate:rd.lastUpdatedAtApify\r\n      };\r\n    });\r\n    this.regionHistoricData=retrievedRegionData.filter(regData=> regData.regionData !== undefined)\r\n    console.log(this.regionHistoricData);\r\n  }\r\n  setCardData=(data,dataType)=>{\r\n    if(dataType === 'National'){\r\n      this.cardData = {\r\n        Active:data.activeCases,\r\n        Deaths:data.deaths,\r\n        Recovered:data.recovered,\r\n        Confirmed:data.totalCases\r\n      }\r\n    }\r\n    else{\r\n      this.cardData = {\r\n        Active:data[0].totalInfected,\r\n        Deaths:data[0].deceased,\r\n        Recovered:data[0].recovered,\r\n        Confirmed:data[0].totalCases\r\n      }\r\n    }    \r\n  }\r\n  handleRegionChange=(region)=>{    \r\n    if(region === \"National\"){\r\n      this.setCardData(this.nationalData,region);\r\n      this.setState({\r\n        regionData:{},\r\n        cardData:this.cardData\r\n      })\r\n    }\r\n    else{\r\n      const prevData=this.state.data.regionData;\r\n      const regionData = prevData.filter(r=>r.region === region);       \r\n      this.setCardData(regionData,region);    \r\n      this.setState({\r\n        regionData:regionData,\r\n        region:region,\r\n        cardData:this.cardData\r\n      })\r\n    }   \r\n  }\r\n  render(){     \r\n    const card= this.state.data.activeCases ? <div className={styles.cardsAndDropDown}><DataCards lastUpdate={this.state.lastUpdate}\r\n    data={this.state.cardData}/>\r\n     { this.state.data.hasOwnProperty('regionData')?\r\n        <Regions data={this.state.data} changeRegion={this.handleRegionChange}/>:\r\n        null\r\n        }</div>:null;    \r\n    return(\r\n      <div>\r\n         <Headers lastUpdate={this.state.lastUpdate}/> \r\n        {this.state.loading ? <div style={{margin:'3%'}}>\r\n          <br/>\r\n          Loading Please wait...\r\n          <br/>\r\n          <LinearProgress color=\"secondary\" /></div>\r\n           : null}               \r\n          {card}                      \r\n        {\r\n           this.state.data.hasOwnProperty('regionData')? \r\n          <div className={styles.tableAndDropDown}>\r\n            <StateTable data={this.state.data}/> \r\n            <div style={{display:'block'}}> \r\n            {\r\n              Object.keys(this.state.cardData).length ?  \r\n              <DonutGradientChart data={this.state.cardData}/> \r\n              : null\r\n            }                               \r\n        </div>   \r\n          </div>:null\r\n        }                                      \r\n        <br/>                      \r\n        {          \r\n          this.state.historicData.length && !Object.keys(this.state.regionData).length ? \r\n          <HistoricChart chartData={this.state.historicData}/> : null\r\n        }            \r\n      </div>      \r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import 'semantic-ui-css/semantic.min.css';\r\nReactDOM.render(\r\n  \r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"cards_active__3NyKv\",\"deaths\":\"cards_deaths__248gK\",\"recovered\":\"cards_recovered__1H3TB\",\"confirmed\":\"cards_confirmed__1ZKax\",\"dontShow\":\"cards_dontShow__2-_bU\",\"titleDisplayer\":\"cards_titleDisplayer__2zkc8\",\"caseText\":\"cards_caseText__8qk5Y\",\"cardDisplay\":\"cards_cardDisplay__ig7La\",\"individualContent\":\"cards_individualContent__B5Q37\",\"noShadow\":\"cards_noShadow__2BU7h\",\"imageDisplayer\":\"cards_imageDisplayer__2wuOs\"};"],"sourceRoot":""}