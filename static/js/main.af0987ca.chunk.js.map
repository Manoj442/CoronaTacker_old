{"version":3,"sources":["ChartComponents/googleCharts.module.css","Regions/States.module.css","API/index.js","Cards/DataCards.js","Regions/States.js","ChartComponents/GooglePieChart.js","ChartComponents/ReactApexChart.js","ChartComponents/ApexLineChart.js","App.js","serviceWorker.js","index.js","Cards/cards.module.css"],"names":["module","exports","fetchNationalData","a","axios","all","get","data","console","log","DataCards","props","dataCard","Fragment","Typography","className","styles","titleDisplayer","variant","cardDisplay","Card","Object","keys","map","d","index","CardContent","key","individualContent","align","active","confirmed","deaths","recovered","start","end","duration","separator","caseText","Date","lastUpdate","toDateString","toLocaleTimeString","Regions","state","regions","regionalData","this","regionData","FormControl","countryDropdown","component","NativeSelect","onChange","e","changeRegion","target","value","region","Component","PieChart","pieChartDimension","Paper","elevation","width","height","chartType","loader","totalInfected","deceased","options","title","is3D","rootProps","ReactApexChart","chartData","activeSeries","activeCases","recoveredSeries","confirmedSeries","totalCases","deathSeries","categories","lastUpdatedAtApify","series","name","chart","type","dropShadow","enabled","color","top","left","blur","opacity","animations","easing","speed","animateGradually","delay","dynamicAnimation","theme","palette","dataLabels","stroke","curve","text","xaxis","responsive","breakpoint","plotOptions","bar","horizontal","legend","position","tooltip","x","format","apexLineChartDimension","ApexLineChart","colors","stacked","show","showForNullSeries","showForZeroSeries","inverseOrder","fill","App","cardData","nationalData","setCardData","dataType","Active","Deaths","Recovered","Confirmed","handleRegionChange","setState","filter","r","historicData","loading","sortedData","length","slice","sort","card","deceasedArray","hasOwnProperty","recoveredArray","ActiveArray","confirmedArray","lineChartArray","style","margin","LinearProgress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af0987ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChartDimension\":\"googleCharts_lineChartDimension__3yOBq\",\"pieChartDimension\":\"googleCharts_pieChartDimension__32CX5\",\"apexLineChartDimension\":\"googleCharts_apexLineChartDimension__2d1JA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryDropdown\":\"States_countryDropdown__2Dqsw\"};","import axios from 'axios';\r\nconst url='https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true';\r\nconst historicUrl='https://api.apify.com/v2/datasets/58a4VXwBBF0HtxuQa/items?format=json&clean=1';\r\n//'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchNationalData=async()=>{\r\n    try{\r\n    const data= await axios.all([axios.get(url),axios.get(historicUrl)]) ;\r\n    console.log(data[0].data);\r\n    console.log(data[1].data)\r\n    return data;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }    \r\n}\r\n// export const fetchHistoricData=async()=>{\r\n//     try{\r\n//     const constHistoricData = await axios.get(historicUrl);\r\n//     console.log(constHistoricData);\r\n//     return constHistoricData;\r\n\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n// export const fetchDate=async(country)=>{\r\n//     let changeableUrl=url;\r\n//     if(country){\r\n//         changeableUrl=`${url}/countries/${country}`;\r\n//     }\r\n//     try{\r\n//         const {data:{confirmed,deaths,recovered,lastUpdate}}=await axios.get(changeableUrl);\r\n//         const modifiedData={\r\n//             confirmed,\r\n//             deaths,\r\n//             recovered,lastUpdate\r\n//         }\r\n//         console.log(modifiedData)\r\n//         return modifiedData;\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n\r\n// export const fetchCountries=async()=>{\r\n//     const countryUrl=`${url}/countries`;\r\n//  const {data:{countries}}=await axios.get(countryUrl);\r\n//  return countries.map((country)=>country.name);\r\n//  //console.log(countries);\r\n// }\r\n// export const fetchDailyData=async()=>{\r\n//     const dailyDataUrl=`${url}/daily`;\r\n//  const dailyData=await axios.get(dailyDataUrl);\r\n//  console.log(dailyData);\r\n//  return dailyData.data.map((d)=>({\r\n//      confirmed:d.confirmed.total,\r\n//     deaths:d.deaths.total,\r\n//     date:d.reportDate}));\r\n// }\r\n\r\n\r\n","import React from 'react';\r\nimport {Grid,Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css';\r\n//import Typography from '@material-ui/core/Typography';\r\nconst DataCards =(props)=>{ \r\n  const data=props.data;                \r\n      const dataCard =  \r\n      <React.Fragment>\r\n        <Typography className={styles.titleDisplayer} variant=\"h3\">\r\n         COVID-19 DASHBOARD        \r\n        </Typography><br/>\r\n        <div className={styles.cardDisplay}>\r\n        <Card variant=\"outlined\">\r\n        {Object.keys(data).map((d,index)=>( \r\n      <CardContent key={index} className={styles.individualContent}>                     \r\n        <Typography variant=\"h5\" align=\"center\">\r\n        <CountUp className={d === 'Active' ? styles.active : d === 'Confirmed' ? styles.confirmed : \r\n        d === 'Deaths' ? styles.deaths : styles.recovered} start={0} \r\n        end={data[`${d}`]} duration = {3} separator=\",\"/>\r\n          </Typography>\r\n          <Typography variant=\"overline\" align=\"center\" className={styles.caseText}>\r\n          {d} \r\n        </Typography>          \r\n      </CardContent>))}     \r\n    </Card>\r\n    </div>\r\n          {/* <Grid container spacing={4} justify=\"center\">                \r\n        <Grid item component={Card} className={styles.cardDisplay}>\r\n          {Object.keys(data).map((d,index)=>(  \r\n          <CardContent key={index}>\r\n          <Typography variant=\"body1\" align=\"center\" className={styles.caseText}>\r\n          {d} \r\n        </Typography> \r\n        <Typography variant=\"h5\" align=\"center\">\r\n        <CountUp className={styles.caseNumber} start={0} \r\n        end={data[`${d}`]} duration = {3} separator=\",\"/>\r\n          </Typography>               \r\n          </CardContent> \r\n          ))}     \r\n        </Grid>\r\n    </Grid><br/>\r\n    <Typography variant=\"h6\" align=\"center\">\r\n          {new Date(props.lastUpdate).toDateString()} {new Date(props.lastUpdate).toLocaleTimeString()}\r\n        </Typography> */}\r\n        <br/>\r\n        <Typography variant=\"h6\" align=\"center\">\r\n          {new Date(props.lastUpdate).toDateString()} {new Date(props.lastUpdate).toLocaleTimeString()}\r\n        </Typography> \r\n      </React.Fragment>\r\n    return(      \r\n        <div>\r\n               {dataCard}   \r\n        </div>\r\n    )\r\n}\r\nexport default DataCards;","import React, {Component} from 'react';\r\nimport {FormControl, NativeSelect, Typography} from '@material-ui/core';\r\nimport styles from './../Regions/States.module.css';\r\nclass Regions extends Component{  \r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        regions:[]\r\n    }\r\n}\r\n    render(){\r\n        const data=this.props.data;\r\n        const regionalData=data.regionData;       \r\n        return(\r\n            <FormControl className={styles.countryDropdown}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                Select a Region:\r\n                </Typography>\r\n                <NativeSelect onChange={(e)=>this.props.changeRegion(e.target.value)}>\r\n                    <option value=\"National\">National</option>\r\n                    {regionalData.map((data,index)=>{\r\n                        return <option key={index} value={data.region}>{data.region}</option>\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>)\r\n}\r\n}\r\nexport default Regions;","import React, { Component } from 'react';\r\nimport {Chart} from 'react-google-charts';\r\nimport {Paper} from '@material-ui/core';\r\nimport styles from './googleCharts.module.css';\r\n//import styles from './../Charts/GoogleCharts/googleCharts.module.css';\r\nclass PieChart extends Component{\r\n    render(){\r\n      console.log(this.props.regionData);\r\n      const regionalData=this.props.regionData;         \r\n        return <div className={styles.pieChartDimension}><Paper elevation={5}><Chart \r\n          width={'500px'}\r\n          height={'300px'}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            ['Cases', 'Numbers'],\r\n            ['Active', regionalData[0].totalInfected],\r\n            ['Deaths', regionalData[0].deceased],\r\n            ['Recovered', regionalData[0].recovered]   \r\n          ]}\r\n          options={{\r\n            title: `Current status in ${this.props.region}`,\r\n            is3D: true,\r\n          }}\r\n          rootProps={{ 'data-testid': '2' }}\r\n        /></Paper>\r\n        </div>\r\n    }\r\n}\r\nexport default PieChart;","import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport {Paper} from '@material-ui/core';\r\nclass ReactApexChart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props.chartData);\r\n        const activeSeries=props.chartData.map(({activeCases})=>activeCases);\r\n        const recoveredSeries=props.chartData.map(({recovered})=>recovered);\r\n        const confirmedSeries=props.chartData.map(({totalCases})=>totalCases);\r\n        const deathSeries=props.chartData.map(({deaths})=>deaths);\r\n        const categories=props.chartData.map(({lastUpdatedAtApify})=>lastUpdatedAtApify);\r\n        this.state = {          \r\n            series: [{\r\n              name: 'Active',\r\n              data: activeSeries\r\n            }, {\r\n              name: 'Recovered',\r\n              data: recoveredSeries\r\n            },\r\n            {\r\n                name: 'Confirmed',\r\n                data: confirmedSeries\r\n              },\r\n              {\r\n                name: 'Deaths',\r\n                data: deathSeries\r\n              },\r\n        ],\r\n            options: {\r\n              chart: {\r\n                height: '50%',\r\n                width:'50%',\r\n                type: 'line',\r\n                dropShadow: {\r\n                    enabled: true,\r\n                    color: '#000',\r\n                    top: 18,\r\n                    left: 7,\r\n                    blur: 10,\r\n                    opacity: 0.2\r\n                  },\r\n                  animations: {\r\n                    enabled: true,\r\n                    easing: 'easeinout',\r\n                    speed: 800,\r\n                    animateGradually: {\r\n                        enabled: true,\r\n                        delay: 150\r\n                    },\r\n                    dynamicAnimation: {\r\n                        enabled: true,\r\n                        speed: 350\r\n                    }\r\n                }\r\n              },\r\n              theme: {\r\n                palette: 'palette1' \r\n              },\r\n              dataLabels: {\r\n                enabled: false\r\n              },\r\n              stroke: {\r\n                curve: 'straight'              \r\n              },\r\n              title: {\r\n                text: 'Daily Count'\r\n              },\r\n              xaxis: {\r\n                type: 'datetime',\r\n                categories: categories\r\n              },             \r\n              responsive: [\r\n                {\r\n                  breakpoint: 1000,\r\n                  options: {\r\n                    plotOptions: {\r\n                      bar: {\r\n                        horizontal: false\r\n                      }\r\n                    },\r\n                    legend: {\r\n                      position: \"bottom\"\r\n                    }\r\n                  }\r\n                }\r\n              ],\r\n              tooltip: {\r\n                x: {\r\n                  format: 'dd/MM/yy HH:mm'\r\n                },\r\n              },\r\n            },\r\n          \r\n          \r\n          };\r\n    }\r\n    render(){\r\n        return <div className={styles.apexLineChartDimension}>\r\n            <Paper elevation={5}><Chart options={this.state.options} series={this.state.series} \r\n        type=\"line\"/>\r\n        </Paper>\r\n        </div>\r\n    }\r\n}\r\nexport default ReactApexChart;","import React, { Component } from 'react'\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport {Paper} from '@material-ui/core';\r\nclass ApexLineChart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props.data.regionData);\r\n        const data = this.props.chartData;        \r\n        const categories=this.props.data.regionData.map(({region})=>region); \r\n        const colors = this.props.title === 'Deaths' ? ['#FF4500'] : \r\n        this.props.title === 'Recovered' ? ['lawngreen'] : \r\n        this.props.title === 'Active' ? ['#FFD700'] :\r\n        this.props.title === 'Confirmed'? ['cornflowerblue'] :[]\r\n        console.log(data);\r\n        const name='' ;  \r\n        this.state = {          \r\n            series: [{\r\n              name:name,\r\n              data: data\r\n            }],\r\n            options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 1000,\r\n                stacked: true,\r\n                dropShadow: {\r\n                  enabled: true,\r\n                  color: '#000',\r\n                  top: 18,\r\n                  left: 7,\r\n                  blur: 10,\r\n                  opacity: 0.2\r\n                },                \r\n              },\r\n              legend:{\r\n                show:true,\r\n                showForNullSeries: true,\r\n                showForZeroSeries: true,\r\n                inverseOrder:true\r\n              },              \r\n              plotOptions: {\r\n                bar: {\r\n                  horizontal: true,\r\n                },                \r\n              },\r\n              dataLabels: {\r\n                enabled: false\r\n              },\r\n              title: {\r\n                text: `${this.props.title} count across the states`\r\n              },\r\n              xaxis: {\r\n                categories: categories,                \r\n              },                          \r\n              fill:{\r\n                colors:colors\r\n              }            \r\n            },                    \r\n          }; \r\n    }       \r\n    render(){        \r\n        return <div className={styles.apexLineChartDimension}>\r\n        <Paper elevation={5}><Chart options={this.state.options} series={this.state.series} type=\"bar\" \r\n        height={800} />\r\n        </Paper>                    \r\n        </div>\r\n    }\r\n}\r\nexport default ApexLineChart;","import React, {Component} from 'react';\r\n//import logo from './logo.svg';\r\n//import styles from './App.css';\r\nimport {fetchNationalData} from './API/index';\r\nimport DataCards from './Cards/DataCards';\r\nimport Regions from './Regions/States';\r\nimport PieChart from './ChartComponents/GooglePieChart';\r\nimport ReactApexChart from './ChartComponents/ReactApexChart';\r\nimport ApexLineChart from './ChartComponents/ApexLineChart';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n//import axios from 'axios';\r\nclass App extends Component{ \r\n  cardData={};\r\n  nationalData={};\r\n  lastUpdate='';\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      data:{},\r\n      region:'',\r\n      regionData:{},\r\n      historicData:[],\r\n      loading:true,\r\n      cardData:{},\r\n      lastUpdate:''\r\n      }\r\n    }    \r\n  async componentDidMount(){\r\n    const data=await fetchNationalData();\r\n    console.log(data);   \r\n    this.nationalData=data[0].data;\r\n    this.lastUpdate = data[0].data.lastUpdatedAtApify;\r\n    console.log(this.nationalData);\r\n    this.setCardData(this.nationalData,'National');\r\n    var sortedData=[];\r\n    if(data[1].data.length){      \r\n      sortedData=[...data[1].data].slice().sort();\r\n      console.log(sortedData);\r\n    }       \r\n    this.setState(\r\n      {\r\n        data:data[0].data,\r\n        historicData:sortedData,\r\n        loading:false,\r\n        cardData:this.cardData,\r\n        lastUpdate:this.lastUpdate\r\n      });\r\n  }\r\n  setCardData=(data,dataType)=>{\r\n    if(dataType === 'National'){\r\n      this.cardData = {\r\n        Active:data.activeCases,\r\n        Deaths:data.deaths,\r\n        Recovered:data.recovered,\r\n        Confirmed:data.totalCases\r\n      }\r\n    }\r\n    else{\r\n      this.cardData = {\r\n        Active:data[0].totalInfected,\r\n        Deaths:data[0].deceased,\r\n        Recovered:data[0].recovered,\r\n        Confirmed:data[0].totalCases\r\n      }\r\n\r\n    }    \r\n  }\r\n  handleRegionChange=(region)=>{    \r\n    if(region === \"National\"){\r\n      this.setCardData(this.nationalData,region);\r\n      this.setState({\r\n        regionData:{},\r\n        cardData:this.cardData\r\n      })\r\n    }\r\n    else{\r\n      const prevData=this.state.data.regionData;\r\n      const regionData = prevData.filter(r=>r.region === region); \r\n      this.setCardData(regionData,region);    \r\n      this.setState({\r\n        regionData:regionData,\r\n        region:region,\r\n        cardData:this.cardData\r\n      })\r\n    }   \r\n  }\r\n  render(){\r\n    console.log(this.state.regionData);\r\n    console.log(this.state.cardData);\r\n    console.log(this.state.historicData);    \r\n    const card= this.state.data.activeCases ? <DataCards lastUpdate={this.state.lastUpdate}\r\n    data={this.state.cardData}/>:null;\r\n    const deceasedArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({deceased})=>deceased):[];\r\n    const recoveredArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({recovered})=>recovered):[];\r\n    const ActiveArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({totalInfected})=>totalInfected):[];\r\n    const confirmedArray=this.state.data.hasOwnProperty('regionData') ? \r\n    this.state.data.regionData.map(({totalCases})=>totalCases):[];\r\n    const lineChartArray=this.state.data.hasOwnProperty('regionData') ?{\r\n      Deaths:deceasedArray,\r\n      Recovered:recoveredArray,\r\n      Active:ActiveArray,\r\n      Confirmed:confirmedArray\r\n    }:{};\r\n    console.log(Object.keys(lineChartArray));\r\n    return(\r\n      <div>\r\n        {this.state.loading ? <div style={{margin:'3%'}}><br/>Loading Please wait...<br/><LinearProgress color=\"secondary\" /></div> : null}        \r\n        {card}<br/> \r\n        {/* <Statistics/><br/> */}\r\n        {\r\n          this.state.data.hasOwnProperty('regionData')? \r\n          <Regions data={this.state.data} changeRegion={this.handleRegionChange}/>\r\n          :null\r\n        }\r\n        <br/>\r\n        {Object.keys(this.state.regionData).length?         \r\n        <PieChart regionData={this.state.regionData} \r\n          region={this.state.region}/> : null }        \r\n        <br/>\r\n        <br/>\r\n        {          \r\n          this.state.historicData.length && !Object.keys(this.state.regionData).length ? \r\n          <ReactApexChart chartData={this.state.historicData}/> : null\r\n        }\r\n        <br/>\r\n        <br/>\r\n        {\r\n          this.state.data.hasOwnProperty('regionData') && !Object.keys(this.state.regionData).length?\r\n          Object.keys(lineChartArray).map((d,index)=>\r\n          <React.Fragment>\r\n          <ApexLineChart key={index} \r\n          title={d}\r\n          chartData={lineChartArray[`${d}`]} data={this.state.data}/><br/><br/>\r\n          </React.Fragment>):null\r\n            }                                          \r\n      </div>      \r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import 'semantic-ui-css/semantic.min.css';\r\nReactDOM.render(\r\n  \r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"cards_active__3NyKv\",\"deaths\":\"cards_deaths__248gK\",\"recovered\":\"cards_recovered__1H3TB\",\"confirmed\":\"cards_confirmed__1ZKax\",\"dontShow\":\"cards_dontShow__2-_bU\",\"titleDisplayer\":\"cards_titleDisplayer__2zkc8\",\"caseText\":\"cards_caseText__8qk5Y\",\"cardDisplay\":\"cards_cardDisplay__ig7La\",\"individualContent\":\"cards_individualContent__B5Q37\"};"],"sourceRoot":""}