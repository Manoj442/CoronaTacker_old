{"version":3,"sources":["Charts/GoogleCharts/googleCharts.module.css","Countries/Countries.module.css","Cards/cards.module.css","API/index.js","Cards/RegionalCards.js","Cards/NationalCards.js","Countries/States.js","Charts/GoogleCharts/GooglePieChart.js","Charts/GoogleCharts/GoogleLineChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchNationalData","a","axios","get","data","console","log","RegionalCards","this","props","regionalData","Object","keys","Fragment","Typography","className","styles","titleDisplayer","variant","Grid","container","spacing","justify","map","d","index","key","item","component","Card","active","deaths","recovered","confirmed","dontShow","CardContent","align","caseText","caseNumber","start","end","duration","separator","Date","toLocaleString","Component","NationalCards","regionData","nationalData","length","Regions","state","regions","FormControl","countryDropdown","NativeSelect","onChange","e","changeRegion","target","value","region","PieChart","width","height","chartType","loader","totalInfected","deceased","options","title","is3D","rootProps","LineChart","push","details","detailsArray","lineChart","chartArea","isStacked","hAxis","minValue","vAxis","pieChartDimension","lineChartDimension","App","handleRegionChange","setState","filter","r","card","activeCases","hasOwnProperty","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80874e75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChartDimension\":\"googleCharts_lineChartDimension__4IDUN\",\"pieChartDimension\":\"googleCharts_pieChartDimension__3RN4G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryDropdown\":\"Countries_countryDropdown__vYkg2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"cards_active__3NyKv\",\"deaths\":\"cards_deaths__248gK\",\"recovered\":\"cards_recovered__1H3TB\",\"confirmed\":\"cards_confirmed__1ZKax\",\"dontShow\":\"cards_dontShow__2-_bU\",\"titleDisplayer\":\"cards_titleDisplayer__2zkc8\",\"caseNumber\":\"cards_caseNumber__2opqJ\",\"caseText\":\"cards_caseText__8qk5Y\"};","import axios from 'axios';\r\nconst url='https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true';\r\n//'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchNationalData=async()=>{\r\n    try{\r\n    const data= await axios.get(url);\r\n    console.log(data.data);\r\n    return data.data;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }    \r\n}\r\n\r\n// export const fetchDate=async(country)=>{\r\n//     let changeableUrl=url;\r\n//     if(country){\r\n//         changeableUrl=`${url}/countries/${country}`;\r\n//     }\r\n//     try{\r\n//         const {data:{confirmed,deaths,recovered,lastUpdate}}=await axios.get(changeableUrl);\r\n//         const modifiedData={\r\n//             confirmed,\r\n//             deaths,\r\n//             recovered,lastUpdate\r\n//         }\r\n//         console.log(modifiedData)\r\n//         return modifiedData;\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n\r\n// export const fetchCountries=async()=>{\r\n//     const countryUrl=`${url}/countries`;\r\n//  const {data:{countries}}=await axios.get(countryUrl);\r\n//  return countries.map((country)=>country.name);\r\n//  //console.log(countries);\r\n// }\r\n// export const fetchDailyData=async()=>{\r\n//     const dailyDataUrl=`${url}/daily`;\r\n//  const dailyData=await axios.get(dailyDataUrl);\r\n//  console.log(dailyData);\r\n//  return dailyData.data.map((d)=>({\r\n//      confirmed:d.confirmed.total,\r\n//     deaths:d.deaths.total,\r\n//     date:d.reportDate}));\r\n// }\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport {Grid,Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css'\r\n//import Typography from '@material-ui/core/Typography';\r\nclass RegionalCards extends Component{\r\n  // constructor(props){\r\n  //   super(props);\r\n  //  //console.log(props);\r\n  // }\r\n    render(){\r\n      const data=this.props.regionalData;  \r\n      console.log(data[0]);\r\n      console.log(Object.keys(data))\r\n        return <React.Fragment>\r\n          <Typography className={styles.titleDisplayer} variant=\"h3\">\r\n        COVID-19 DASHBOARD\r\n      </Typography><br/>\r\n         <Grid container spacing={4} justify=\"center\"> \r\n         {Object.keys(data[0]).map((d,index)=>(         \r\n      <Grid key={index} item component={Card} \r\n      className={d === 'totalInfected'? styles.active: \r\n      d=== 'deceased' ? styles.deaths:\r\n      d === 'recovered'?styles.recovered:d === 'totalCases'? styles.confirmed : styles.dontShow}>\r\n        <CardContent>\r\n        <Typography variant=\"body1\" align=\"center\" className={styles.caseText}>\r\n        {d === 'totalInfected' ? 'Active':d ==='deceased' ?'Deaths': d === 'recovered'?'Recovered':'Confirmed'} \r\n      </Typography> \r\n      <Typography variant=\"h5\" align=\"center\">\r\n       <CountUp className={styles.caseNumber} start={0} \r\n       end={data[0][`${d}`]} duration = {3} separator=\",\"/>\r\n        </Typography>          \r\n      {/* <Typography variant=\"subtitle1\" align=\"center\">\r\n        Last update : {new Date(data.lastUpdatedAtApify).toLocaleString()}\r\n      </Typography>       */}\r\n        </CardContent>      \r\n      </Grid>))}\r\n  </Grid><br/>\r\n  <Typography variant=\"h6\" align=\"center\">\r\n        Last update : {new Date().toLocaleString()}\r\n      </Typography>            \r\n        </React.Fragment>\r\n    }\r\n}\r\nexport default RegionalCards;","import React, {Component} from 'react';\r\nimport {Grid,Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css'\r\nimport RegionalCards from './RegionalCards';\r\n//import Typography from '@material-ui/core/Typography';\r\nclass NationalCards extends Component{\r\n  // constructor(props){\r\n  //   super(props);\r\n  //  //console.log(props);\r\n  // }\r\n    render(){\r\n      const data=this.props.data;  \r\n      const regionalData=this.props.regionData;\r\n      console.log(regionalData);\r\n      console.log(data);\r\n      console.log(Object.keys(data));\r\n      const nationalData = Object.keys(regionalData).length ? <RegionalCards regionalData={regionalData}/>:  \r\n      <React.Fragment><Typography className={styles.titleDisplayer} variant=\"h3\">\r\n        COVID-19 DASHBOARD\r\n      </Typography><br/>\r\n         <Grid container spacing={4} justify=\"center\"> \r\n         {Object.keys(data).map((d,index)=>(         \r\n      <Grid key={index} item component={Card} \r\n      className={d === 'activeCases'? styles.active: \r\n      d=== 'deaths' ? styles.deaths:\r\n      d === 'recovered'?styles.recovered: d==='totalCases'? styles.confirmed:styles.dontShow}>\r\n        <CardContent>\r\n        <Typography variant=\"body1\" align=\"center\" className={styles.caseText}>\r\n        {d === 'activeCases' ? 'Active':d ==='deaths' ?'Deaths': d === 'recovered'?'Recovered':'Confirmed'} \r\n      </Typography> \r\n      <Typography variant=\"h5\" align=\"center\">\r\n       <CountUp className={styles.caseNumber} start={0} \r\n       end={data[`${d}`]} duration = {3} separator=\",\"/>\r\n        </Typography>          \r\n      {/* <Typography variant=\"subtitle1\" align=\"center\">\r\n        Last update : {new Date(data.lastUpdatedAtApify).toLocaleString()}\r\n      </Typography>       */}\r\n        </CardContent>      \r\n      </Grid>))}\r\n  </Grid><br/>\r\n  <Typography variant=\"h6\" align=\"center\">\r\n        Last update : {new Date().toLocaleString()}\r\n      </Typography>\r\n      </React.Fragment>\r\n        return <div>\r\n               {nationalData}   \r\n        </div>\r\n    }\r\n}\r\nexport default NationalCards;","import React, {Component} from 'react';\r\nimport {FormControl, NativeSelect, Typography} from '@material-ui/core';\r\n//import {fetchCountries} from './../API/index';\r\nimport styles from './../Countries/Countries.module.css';\r\n//import {axios} from 'axios';\r\nclass Regions extends Component{  \r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        regions:[]\r\n    }\r\n}\r\n    render(){\r\n        const data=this.props.data;\r\n        const regionalData=data.regionData;\r\n        //console.log(data);\r\n        //console.log(regionalData);\r\n        console.log(this.props.regionData)\r\n        return(\r\n            <FormControl className={styles.countryDropdown}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                Select a Region:\r\n                </Typography>\r\n                <NativeSelect onChange={(e)=>this.props.changeRegion(e.target.value)}>\r\n                    <option value=\"\">National</option>\r\n                    {regionalData.map((data,index)=>{\r\n                        return <option key={index} value={data.region}>{data.region}</option>\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>)\r\n}\r\n}\r\nexport default Regions;","import React, { Component } from 'react';\r\nimport {Chart} from 'react-google-charts';\r\n//import styles from './../Charts/GoogleCharts/googleCharts.module.css';\r\nclass PieChart extends Component{\r\n    render(){\r\n      console.log(this.props.regionData);\r\n      const regionalData=this.props.regionData;         \r\n        return <Chart \r\n          width={'500px'}\r\n          height={'300px'}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            ['Cases', 'Numbers'],\r\n            ['Active', regionalData[0].totalInfected],\r\n            ['Deaths', regionalData[0].deceased],\r\n            ['Recovered', regionalData[0].recovered]   \r\n          ]}\r\n          options={{\r\n            title: `Current status in ${this.props.region}`,\r\n            is3D: true,\r\n          }}\r\n          rootProps={{ 'data-testid': '2' }}\r\n        />\r\n    }\r\n}\r\nexport default PieChart;","import React, { Component } from 'react';\r\nimport {Chart} from 'react-google-charts';\r\n//import {fetchDailyData} from './../../API/index';\r\nimport PieChart from './GooglePieChart';\r\nimport styles from './../GoogleCharts/googleCharts.module.css';\r\nclass LineChart extends Component{    \r\n    async componentDidMount(){\r\n     //this.setState({data:await fetchDailyData()})\r\n    }\r\n    render(){\r\n        //console.log(this.state.data);\r\n        //const dataRetrieved=this.props.data;\r\n        //const keys=Object.keys(data);\r\n        console.log(this.props.data.regionData);\r\n        const data = [];\r\n        data.push(['region', 'Confirmed','Deaths']);\r\n        this.props.data.regionData.map(details => {\r\n        const detailsArray = [];\r\n        detailsArray.push(details.region);\r\n        detailsArray.push(details.totalInfected);\r\n        detailsArray.push(details.deceased);        \r\n        data.push(detailsArray);\r\n         });\r\n        const lineChart= <Chart\r\n        width={'500px'}\r\n        height={'700px'}\r\n        chartType=\"BarChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        options={{\r\n          title: 'State-wise cases',\r\n          chartArea: { width: '50%' },\r\n          isStacked: true,\r\n          hAxis: {\r\n            title: 'Active & Deaths',\r\n            minValue: 0,\r\n          },\r\n          vAxis: {\r\n            title: 'State',\r\n          },\r\n        }}\r\n        rootProps={{ 'data-testid': '1' }}\r\n      />\r\n      return <div className={Object.keys(this.props.regionData).length? styles.pieChartDimension :styles.lineChartDimension}>\r\n      {Object.keys(this.props.regionData).length? <PieChart regionData={this.props.regionData} \r\n      region={this.props.region}/> : lineChart}\r\n      </div>\r\n    }\r\n}\r\nexport default LineChart;","import React, {Component} from 'react';\n//import logo from './logo.svg';\n//import styles from './App.css';\nimport {fetchNationalData} from './API/index';\nimport NationalCards from './Cards/NationalCards';\nimport Regions from './Countries/States';\nimport LineChart from './Charts/GoogleCharts/GoogleLineChart';\n//import axios from 'axios';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      data:{},\n      region:'',\n      regionData:{}\n    }\n  }  \n  async componentDidMount(){\n    const data=await fetchNationalData();\n    console.log(data);\n    this.setState({data:data});\n  }\n\n  handleRegionChange=(region)=>{\n    if(region === \"\"){\n      this.setState({\n        regionData:{}\n      })\n    }\n    else{\n      const prevData=this.state.data.regionData;\n      const regionData = prevData.filter(r=>r.region === region);\n      this.setState({\n        regionData:regionData,\n        region:region\n      })\n    }   \n  }\n  render(){\n    console.log(this.state.regionData);\n    const card= this.state.data.activeCases ? <NationalCards \n    regionData={this.state.regionData} data={this.state.data}/>:null;\n    return(\n      <div>\n        {card}<br/> \n        {\n          this.state.data.hasOwnProperty('regionData')? \n          <Regions data={this.state.data} changeRegion={this.handleRegionChange}/>\n          :null\n        }\n        {\n          this.state.data.hasOwnProperty('regionData')?\n          <LineChart data={this.state.data} regionData={this.state.regionData} region={this.state.region}/> :null\n        }                      \n      \n      </div>      \n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}