{"version":3,"sources":["ChartComponents/googleCharts.module.css","Countries/Countries.module.css","Cards/cards.module.css","API/index.js","Cards/RegionalCards.js","Cards/NationalCards.js","Countries/States.js","ChartComponents/GooglePieChart.js","ChartComponents/ReactApexChart.js","ChartComponents/ApexLineChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchNationalData","a","axios","all","get","data","console","log","RegionalCards","this","props","regionalData","Object","keys","Fragment","Typography","className","styles","titleDisplayer","variant","Grid","container","spacing","justify","map","d","index","key","item","component","Card","active","deaths","recovered","confirmed","dontShow","CardContent","align","caseText","caseNumber","start","end","duration","separator","Date","toLocaleString","Component","NationalCards","regionData","nationalData","length","Regions","state","regions","FormControl","countryDropdown","NativeSelect","onChange","e","changeRegion","target","value","region","PieChart","pieChartDimension","Paper","elevation","width","height","chartType","loader","totalInfected","deceased","options","title","is3D","rootProps","ReactApexChart","chartData","activeSeries","activeCases","recoveredSeries","confirmedSeries","totalCases","deathSeries","categories","lastUpdatedAtApify","series","name","chart","type","dropShadow","enabled","color","top","left","blur","opacity","animations","easing","speed","animateGradually","delay","dynamicAnimation","theme","palette","dataLabels","stroke","curve","text","xaxis","responsive","breakpoint","plotOptions","bar","horizontal","legend","position","tooltip","x","format","apexLineChartDimension","ApexLineChart","colors","stacked","show","showForNullSeries","showForZeroSeries","inverseOrder","fill","App","handleRegionChange","setState","filter","r","historicData","loading","sortedData","slice","sort","card","deceasedArray","hasOwnProperty","recoveredArray","ActiveArray","confirmedArray","lineChartArray","Deaths","Recovered","Active","Confirmed","style","margin","LinearProgress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,mBAAqB,yCAAyC,kBAAoB,wCAAwC,uBAAyB,+C,mBCArKD,EAAOC,QAAU,CAAC,gBAAkB,qC,2ECApCD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,OAAS,sBAAsB,UAAY,yBAAyB,UAAY,yBAAyB,gBAAkB,+BAA+B,SAAW,wBAAwB,eAAiB,8BAA8B,WAAa,0BAA0B,SAAW,0B,+LCIlUC,EAAiB,uCAAC,4BAAAC,EAAA,+EAETC,IAAMC,IAAI,CAACD,IAAME,IAN7B,mGAMsCF,IAAME,IALpC,mFAGa,cAErBC,EAFqB,OAG3BC,QAAQC,IAAIF,EAAK,GAAGA,MACpBC,QAAQC,IAAIF,EAAK,GAAGA,MAJO,kBAKpBA,GALoB,gCAQvBC,QAAQC,IAAR,MARuB,yDAAD,qD,qGCuCfC,E,uKAjCT,IAAMH,EAAKI,KAAKC,MAAMC,aAGpB,OAFFL,QAAQC,IAAIF,EAAK,IACjBC,QAAQC,IAAIK,OAAOC,KAAKR,IACf,kBAAC,IAAMS,SAAP,KACL,kBAACC,EAAA,EAAD,CAAYC,UAAWC,IAAOC,eAAgBC,QAAQ,MAAtD,sBAES,6BACV,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,UACnCX,OAAOC,KAAKR,EAAK,IAAImB,KAAI,SAACC,EAAEC,GAAH,OAC7B,kBAACN,EAAA,EAAD,CAAMO,IAAKD,EAAOE,MAAI,EAACC,UAAWC,IAClCd,UAAiB,kBAANS,EAAuBR,IAAOc,OACpC,aAALN,EAAkBR,IAAOe,OACnB,cAANP,EAAkBR,IAAOgB,UAAgB,eAANR,EAAoBR,IAAOiB,UAAYjB,IAAOkB,UAC/E,kBAACC,EAAA,EAAD,KACA,kBAACrB,EAAA,EAAD,CAAYI,QAAQ,QAAQkB,MAAM,SAASrB,UAAWC,IAAOqB,UACtD,kBAANb,EAAwB,SAAc,aAALA,EAAiB,SAAgB,cAANA,EAAkB,YAAY,aAE7F,kBAACV,EAAA,EAAD,CAAYI,QAAQ,KAAKkB,MAAM,UAC9B,kBAAC,IAAD,CAASrB,UAAWC,IAAOsB,WAAYC,MAAO,EAC9CC,IAAKpC,EAAK,GAAL,UAAWoB,IAAMiB,SAAY,EAAGC,UAAU,aAO7C,6BACP,kBAAC5B,EAAA,EAAD,CAAYI,QAAQ,KAAKkB,MAAM,UAA/B,kBACqB,IAAIO,MAAOC,uB,GAlCNC,aC6CbC,E,uKAtCT,IAAM1C,EAAKI,KAAKC,MAAML,KAChBM,EAAaF,KAAKC,MAAMsC,WAC9B1C,QAAQC,IAAII,GACZL,QAAQC,IAAIF,GACZC,QAAQC,IAAIK,OAAOC,KAAKR,IACxB,IAAM4C,EAAerC,OAAOC,KAAKF,GAAcuC,OAAS,kBAAC,EAAD,CAAevC,aAAcA,IACrF,kBAAC,IAAMG,SAAP,KAAgB,kBAACC,EAAA,EAAD,CAAYC,UAAWC,IAAOC,eAAgBC,QAAQ,MAAtD,sBAEH,6BACV,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,UACnCX,OAAOC,KAAKR,GAAMmB,KAAI,SAACC,EAAEC,GAAH,OAC1B,kBAACN,EAAA,EAAD,CAAMO,IAAKD,EAAOE,MAAI,EAACC,UAAWC,IAClCd,UAAiB,gBAANS,EAAqBR,IAAOc,OAClC,WAALN,EAAgBR,IAAOe,OACjB,cAANP,EAAkBR,IAAOgB,UAAe,eAAJR,EAAkBR,IAAOiB,UAAUjB,IAAOkB,UAC5E,kBAACC,EAAA,EAAD,KACA,kBAACrB,EAAA,EAAD,CAAYI,QAAQ,QAAQkB,MAAM,SAASrB,UAAWC,IAAOqB,UACtD,gBAANb,EAAsB,SAAc,WAALA,EAAe,SAAgB,cAANA,EAAkB,YAAY,aAEzF,kBAACV,EAAA,EAAD,CAAYI,QAAQ,KAAKkB,MAAM,UAC9B,kBAAC,IAAD,CAASrB,UAAWC,IAAOsB,WAAYC,MAAO,EAC9CC,IAAKpC,EAAK,GAAD,OAAIoB,IAAMiB,SAAY,EAAGC,UAAU,aAO1C,6BACP,kBAAC5B,EAAA,EAAD,CAAYI,QAAQ,KAAKkB,MAAM,UAA/B,kBACqB,IAAIO,MAAOC,mBAG1B,OAAO,6BACCI,O,GAxCYH,a,mCC0BbK,E,kDA1Bf,WAAYzC,GAAO,IAAD,8BACd,cAAMA,IACD0C,MAAM,CACPC,QAAQ,IAHE,E,qDAML,IAAD,OAEE1C,EADKF,KAAKC,MAAML,KACE2C,WAIxB,OADA1C,QAAQC,IAAIE,KAAKC,MAAMsC,YAEnB,kBAACM,EAAA,EAAD,CAAatC,UAAWC,IAAOsC,iBAC3B,kBAACxC,EAAA,EAAD,CAAYI,QAAQ,KAAKU,UAAU,MAAnC,oBAGA,kBAAC2B,EAAA,EAAD,CAAcC,SAAU,SAACC,GAAD,OAAK,EAAKhD,MAAMiD,aAAaD,EAAEE,OAAOC,SAC1D,4BAAQA,MAAM,IAAd,YACClD,EAAaa,KAAI,SAACnB,EAAKqB,GACpB,OAAO,4BAAQC,IAAKD,EAAOmC,MAAOxD,EAAKyD,QAASzD,EAAKyD,iB,GArBvDhB,a,iCCwBPiB,E,uKAtBTzD,QAAQC,IAAIE,KAAKC,MAAMsC,YACvB,IAAMrC,EAAaF,KAAKC,MAAMsC,WAC5B,OAAO,yBAAKhC,UAAWC,IAAO+C,mBAAmB,kBAACC,EAAA,EAAD,CAAOC,UAAW,GAAG,kBAAC,IAAD,CACpEC,MAAO,QACPC,OAAQ,QACRC,UAAU,WACVC,OAAQ,8CACRjE,KAAM,CACJ,CAAC,QAAS,WACV,CAAC,SAAUM,EAAa,GAAG4D,eAC3B,CAAC,SAAU5D,EAAa,GAAG6D,UAC3B,CAAC,YAAa7D,EAAa,GAAGsB,YAEhCwC,QAAS,CACPC,MAAM,qBAAD,OAAuBjE,KAAKC,MAAMoD,QACvCa,MAAM,GAERC,UAAW,CAAE,cAAe,a,GAnBf9B,a,iBCqGR+B,E,kDArGX,WAAYnE,GAAO,IAAD,sBACd,cAAMA,GACNJ,QAAQC,IAAIG,EAAMoE,WAClB,IAAMC,EAAarE,EAAMoE,UAAUtD,KAAI,qBAAEwD,eACnCC,EAAgBvE,EAAMoE,UAAUtD,KAAI,qBAAES,aACtCiD,EAAgBxE,EAAMoE,UAAUtD,KAAI,qBAAE2D,cACtCC,EAAY1E,EAAMoE,UAAUtD,KAAI,qBAAEQ,UAClCqD,EAAW3E,EAAMoE,UAAUtD,KAAI,qBAAE8D,sBAPzB,OAQd,EAAKlC,MAAQ,CACTmC,OAAQ,CAAC,CACPC,KAAM,SACNnF,KAAM0E,GACL,CACDS,KAAM,YACNnF,KAAM4E,GAER,CACIO,KAAM,YACNnF,KAAM6E,GAER,CACEM,KAAM,SACNnF,KAAM+E,IAGVX,QAAS,CACPgB,MAAO,CACLrB,OAAQ,MACRD,MAAM,MACNuB,KAAM,OACNC,WAAY,CACRC,SAAS,EACTC,MAAO,OACPC,IAAK,GACLC,KAAM,EACNC,KAAM,GACNC,QAAS,IAEXC,WAAY,CACVN,SAAS,EACTO,OAAQ,YACRC,MAAO,IACPC,iBAAkB,CACdT,SAAS,EACTU,MAAO,KAEXC,iBAAkB,CACdX,SAAS,EACTQ,MAAO,OAIjBI,MAAO,CACLC,QAAS,YAEXC,WAAY,CACVd,SAAS,GAEXe,OAAQ,CACNC,MAAO,YAETlC,MAAO,CACLmC,KAAM,eAERC,MAAO,CACLpB,KAAM,WACNL,WAAYA,GAEd0B,WAAY,CACV,CACEC,WAAY,IACZvC,QAAS,CACPwC,YAAa,CACXC,IAAK,CACHC,YAAY,IAGhBC,OAAQ,CACNC,SAAU,aAKlBC,QAAS,CACPC,EAAG,CACDC,OAAQ,qBArFJ,E,qDA8Fd,OAAO,yBAAKxG,UAAWC,IAAOwG,wBAC1B,kBAACxD,EAAA,EAAD,CAAOC,UAAW,GAAG,kBAAC,IAAD,CAAOO,QAAShE,KAAK2C,MAAMqB,QAASc,OAAQ9E,KAAK2C,MAAMmC,OAChFG,KAAK,e,GAjGgB5C,aCiEd4E,E,kDAhEX,WAAYhH,GAAO,IAAD,sBACd,cAAMA,GACNJ,QAAQC,IAAIG,EAAML,KAAK2C,YACvB,IAAM3C,EAAO,EAAKK,MAAMoE,UAClBO,EAAW,EAAK3E,MAAML,KAAK2C,WAAWxB,KAAI,qBAAEsC,UAC5C6D,EAA8B,WAArB,EAAKjH,MAAMgE,MAAqB,CAAC,WAC3B,cAArB,EAAKhE,MAAMgE,MAAwB,CAAC,aACf,WAArB,EAAKhE,MAAMgE,MAAqB,CAAC,WACZ,cAArB,EAAKhE,MAAMgE,MAAuB,CAAC,kBAAmB,GACtDpE,QAAQC,IAAIF,GATE,OAWd,EAAK+C,MAAQ,CACTmC,OAAQ,CAAC,CACPC,KAHK,GAILnF,KAAMA,IAERoE,QAAS,CACPgB,MAAO,CACLC,KAAM,MACNtB,OAAQ,IACRwD,SAAS,EACTjC,WAAY,CACVC,SAAS,EACTC,MAAO,OACPC,IAAK,GACLC,KAAM,EACNC,KAAM,GACNC,QAAS,KAGbmB,OAAO,CACLS,MAAK,EACLC,mBAAmB,EACnBC,mBAAmB,EACnBC,cAAa,GAEff,YAAa,CACXC,IAAK,CACHC,YAAY,IAGhBT,WAAY,CACVd,SAAS,GAEXlB,MAAO,CACLmC,KAAK,GAAD,OAAK,EAAKnG,MAAMgE,MAAhB,6BAENoC,MAAO,CACLzB,WAAYA,GAEd4C,KAAK,CACHN,OAAOA,KAnDD,E,qDAyDd,OAAO,yBAAK3G,UAAWC,IAAOwG,wBAC9B,kBAACxD,EAAA,EAAD,CAAOC,UAAW,GAAG,kBAAC,IAAD,CAAOO,QAAShE,KAAK2C,MAAMqB,QAASc,OAAQ9E,KAAK2C,MAAMmC,OAAQG,KAAK,MACzFtB,OAAQ,Y,GA5DYtB,a,SCuGboF,E,kDA/Fb,aAAc,IAAD,8BACX,gBAuBFC,mBAAmB,SAACrE,GAClB,GAAc,aAAXA,EACD,EAAKsE,SAAS,CACZpF,WAAW,SAGX,CACF,IACMA,EADS,EAAKI,MAAM/C,KAAK2C,WACHqF,QAAO,SAAAC,GAAC,OAAEA,EAAExE,SAAWA,KACnD,EAAKsE,SAAS,CACZpF,WAAWA,EACXc,OAAOA,MAjCX,EAAKV,MAAM,CACT/C,KAAK,GACLyD,OAAO,GACPd,WAAW,GACXuF,aAAa,GACbC,SAAQ,GAPC,E,kMAWMxI,I,OAAXK,E,OACNC,QAAQC,IAAIF,GAIRoI,EAAW,GACZpI,EAAK,GAAGA,KAAK6C,SACduF,EAAW,YAAIpI,EAAK,GAAGA,MAAMqI,QAAQC,OACrCrI,QAAQC,IAAIkI,IAEdhI,KAAK2H,SAAS,CAAC/H,KAAKA,EAAK,GAAGA,KAAKkI,aAAaE,EAAWD,SAAQ,I,qIAkB1D,IAAD,OACNlI,QAAQC,IAAIE,KAAK2C,MAAMJ,YACvB1C,QAAQC,IAAIE,KAAK2C,MAAMmF,cACvB,IAAMK,EAAMnI,KAAK2C,MAAM/C,KAAK2E,YAAc,kBAAC,EAAD,CAC1ChC,WAAYvC,KAAK2C,MAAMJ,WAAY3C,KAAMI,KAAK2C,MAAM/C,OAAQ,KACtDwI,EAAcpI,KAAK2C,MAAM/C,KAAKyI,eAAe,cACnDrI,KAAK2C,MAAM/C,KAAK2C,WAAWxB,KAAI,qBAAEgD,YAAsB,GACjDuE,EAAetI,KAAK2C,MAAM/C,KAAKyI,eAAe,cACpDrI,KAAK2C,MAAM/C,KAAK2C,WAAWxB,KAAI,qBAAES,aAAwB,GACnD+G,EAAYvI,KAAK2C,MAAM/C,KAAKyI,eAAe,cACjDrI,KAAK2C,MAAM/C,KAAK2C,WAAWxB,KAAI,qBAAE+C,iBAAgC,GAC3D0E,EAAexI,KAAK2C,MAAM/C,KAAKyI,eAAe,cACpDrI,KAAK2C,MAAM/C,KAAK2C,WAAWxB,KAAI,qBAAE2D,cAA0B,GACrD+D,EAAezI,KAAK2C,MAAM/C,KAAKyI,eAAe,cAAe,CACjEK,OAAON,EACPO,UAAUL,EACVM,OAAOL,EACPM,UAAUL,GACV,GAEF,OADA3I,QAAQC,IAAIK,OAAOC,KAAKqI,IAEtB,6BACGzI,KAAK2C,MAAMoF,QAAU,yBAAKe,MAAO,CAACC,OAAO,OAAO,6BAA3B,yBAAsD,6BAAK,kBAACC,EAAA,EAAD,CAAgB5D,MAAM,eAAuB,KAC7H+C,EAAK,6BAGJnI,KAAK2C,MAAM/C,KAAKyI,eAAe,cAC/B,kBAAC,EAAD,CAASzI,KAAMI,KAAK2C,MAAM/C,KAAMsD,aAAclD,KAAK0H,qBAClD,KAEH,6BACA,6BACCvH,OAAOC,KAAKJ,KAAK2C,MAAMJ,YAAYE,OACpC,kBAAC,EAAD,CAAUF,WAAYvC,KAAK2C,MAAMJ,WACnCc,OAAQrD,KAAK2C,MAAMU,SAAY,KAC7B,6BACA,6BAEErD,KAAK2C,MAAMmF,aAAarF,SAAWtC,OAAOC,KAAKJ,KAAK2C,MAAMJ,YAAYE,OACtE,kBAAC,EAAD,CAAgB4B,UAAWrE,KAAK2C,MAAMmF,eAAkB,KAE1D,6BACA,6BAEE9H,KAAK2C,MAAM/C,KAAKyI,eAAe,gBAAkBlI,OAAOC,KAAKJ,KAAK2C,MAAMJ,YAAYE,OACpFtC,OAAOC,KAAKqI,GAAgB1H,KAAI,SAACC,EAAEC,GAAH,OAChC,kBAAC,IAAMZ,SAAP,KACA,kBAAC,EAAD,CAAea,IAAKD,EACpBgD,MAAOjD,EACPqD,UAAWoE,EAAe,GAAD,OAAIzH,IAAMpB,KAAM,EAAK+C,MAAM/C,OAAO,6BAAK,iCAC7C,U,GA1FXyC,aCCE4G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpK,QAAQoK,MAAMA,EAAMC,c","file":"static/js/main.299d08bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineChartDimension\":\"googleCharts_lineChartDimension__3yOBq\",\"pieChartDimension\":\"googleCharts_pieChartDimension__32CX5\",\"apexLineChartDimension\":\"googleCharts_apexLineChartDimension__2d1JA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryDropdown\":\"Countries_countryDropdown__vYkg2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"cards_active__3NyKv\",\"deaths\":\"cards_deaths__248gK\",\"recovered\":\"cards_recovered__1H3TB\",\"confirmed\":\"cards_confirmed__1ZKax\",\"statisticsCards\":\"cards_statisticsCards__3SwGQ\",\"dontShow\":\"cards_dontShow__2-_bU\",\"titleDisplayer\":\"cards_titleDisplayer__2zkc8\",\"caseNumber\":\"cards_caseNumber__2opqJ\",\"caseText\":\"cards_caseText__8qk5Y\"};","import axios from 'axios';\r\nconst url='https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true';\r\nconst historicUrl='https://api.apify.com/v2/datasets/58a4VXwBBF0HtxuQa/items?format=json&clean=1';\r\n//'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchNationalData=async()=>{\r\n    try{\r\n    const data= await axios.all([axios.get(url),axios.get(historicUrl)]) ;\r\n    console.log(data[0].data);\r\n    console.log(data[1].data)\r\n    return data;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }    \r\n}\r\n// export const fetchHistoricData=async()=>{\r\n//     try{\r\n//     const constHistoricData = await axios.get(historicUrl);\r\n//     console.log(constHistoricData);\r\n//     return constHistoricData;\r\n\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n// export const fetchDate=async(country)=>{\r\n//     let changeableUrl=url;\r\n//     if(country){\r\n//         changeableUrl=`${url}/countries/${country}`;\r\n//     }\r\n//     try{\r\n//         const {data:{confirmed,deaths,recovered,lastUpdate}}=await axios.get(changeableUrl);\r\n//         const modifiedData={\r\n//             confirmed,\r\n//             deaths,\r\n//             recovered,lastUpdate\r\n//         }\r\n//         console.log(modifiedData)\r\n//         return modifiedData;\r\n//     }\r\n//     catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n\r\n// export const fetchCountries=async()=>{\r\n//     const countryUrl=`${url}/countries`;\r\n//  const {data:{countries}}=await axios.get(countryUrl);\r\n//  return countries.map((country)=>country.name);\r\n//  //console.log(countries);\r\n// }\r\n// export const fetchDailyData=async()=>{\r\n//     const dailyDataUrl=`${url}/daily`;\r\n//  const dailyData=await axios.get(dailyDataUrl);\r\n//  console.log(dailyData);\r\n//  return dailyData.data.map((d)=>({\r\n//      confirmed:d.confirmed.total,\r\n//     deaths:d.deaths.total,\r\n//     date:d.reportDate}));\r\n// }\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport {Grid,Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css'\r\n//import Typography from '@material-ui/core/Typography';\r\nclass RegionalCards extends Component{\r\n  // constructor(props){\r\n  //   super(props);\r\n  //  //console.log(props);\r\n  // }\r\n    render(){\r\n      const data=this.props.regionalData;  \r\n      console.log(data[0]);\r\n      console.log(Object.keys(data))\r\n        return <React.Fragment>\r\n          <Typography className={styles.titleDisplayer} variant=\"h3\">\r\n        COVID-19 DASHBOARD\r\n      </Typography><br/>\r\n         <Grid container spacing={4} justify=\"center\"> \r\n         {Object.keys(data[0]).map((d,index)=>(         \r\n      <Grid key={index} item component={Card} \r\n      className={d === 'totalInfected'? styles.active: \r\n      d=== 'deceased' ? styles.deaths:\r\n      d === 'recovered'?styles.recovered:d === 'totalCases'? styles.confirmed : styles.dontShow}>\r\n        <CardContent>\r\n        <Typography variant=\"body1\" align=\"center\" className={styles.caseText}>\r\n        {d === 'totalInfected' ? 'Active':d ==='deceased' ?'Deaths': d === 'recovered'?'Recovered':'Confirmed'} \r\n      </Typography> \r\n      <Typography variant=\"h5\" align=\"center\">\r\n       <CountUp className={styles.caseNumber} start={0} \r\n       end={data[0][`${d}`]} duration = {3} separator=\",\"/>\r\n        </Typography>          \r\n      {/* <Typography variant=\"subtitle1\" align=\"center\">\r\n        Last update : {new Date(data.lastUpdatedAtApify).toLocaleString()}\r\n      </Typography>       */}\r\n        </CardContent>      \r\n      </Grid>))}\r\n  </Grid><br/>\r\n  <Typography variant=\"h6\" align=\"center\">\r\n        Last update : {new Date().toLocaleString()}\r\n      </Typography>            \r\n        </React.Fragment>\r\n    }\r\n}\r\nexport default RegionalCards;","import React, {Component} from 'react';\r\nimport {Grid,Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css'\r\nimport RegionalCards from './RegionalCards';\r\n//import Typography from '@material-ui/core/Typography';\r\nclass NationalCards extends Component{\r\n  // constructor(props){\r\n  //   super(props);\r\n  //  //console.log(props);\r\n  // }\r\n    render(){\r\n      const data=this.props.data;  \r\n      const regionalData=this.props.regionData;\r\n      console.log(regionalData);\r\n      console.log(data);\r\n      console.log(Object.keys(data));\r\n      const nationalData = Object.keys(regionalData).length ? <RegionalCards regionalData={regionalData}/>:  \r\n      <React.Fragment><Typography className={styles.titleDisplayer} variant=\"h3\">\r\n        COVID-19 DASHBOARD\r\n      </Typography><br/>\r\n         <Grid container spacing={4} justify=\"center\"> \r\n         {Object.keys(data).map((d,index)=>(         \r\n      <Grid key={index} item component={Card} \r\n      className={d === 'activeCases'? styles.active: \r\n      d=== 'deaths' ? styles.deaths:\r\n      d === 'recovered'?styles.recovered: d==='totalCases'? styles.confirmed:styles.dontShow}>\r\n        <CardContent>\r\n        <Typography variant=\"body1\" align=\"center\" className={styles.caseText}>\r\n        {d === 'activeCases' ? 'Active':d ==='deaths' ?'Deaths': d === 'recovered'?'Recovered':'Confirmed'} \r\n      </Typography> \r\n      <Typography variant=\"h5\" align=\"center\">\r\n       <CountUp className={styles.caseNumber} start={0} \r\n       end={data[`${d}`]} duration = {3} separator=\",\"/>\r\n        </Typography>          \r\n      {/* <Typography variant=\"subtitle1\" align=\"center\">\r\n        Last update : {new Date(data.lastUpdatedAtApify).toLocaleString()}\r\n      </Typography>       */}\r\n        </CardContent>      \r\n      </Grid>))}\r\n  </Grid><br/>\r\n  <Typography variant=\"h6\" align=\"center\">\r\n        Last update : {new Date().toLocaleString()}\r\n      </Typography>\r\n      </React.Fragment>\r\n        return <div>\r\n               {nationalData}   \r\n        </div>\r\n    }\r\n}\r\nexport default NationalCards;","import React, {Component} from 'react';\r\nimport {FormControl, NativeSelect, Typography} from '@material-ui/core';\r\n//import {fetchCountries} from './../API/index';\r\nimport styles from './../Countries/Countries.module.css';\r\n//import {axios} from 'axios';\r\nclass Regions extends Component{  \r\nconstructor(props){\r\n    super(props);\r\n    this.state={\r\n        regions:[]\r\n    }\r\n}\r\n    render(){\r\n        const data=this.props.data;\r\n        const regionalData=data.regionData;\r\n        //console.log(data);\r\n        //console.log(regionalData);\r\n        console.log(this.props.regionData)\r\n        return(\r\n            <FormControl className={styles.countryDropdown}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                Select a Region:\r\n                </Typography>\r\n                <NativeSelect onChange={(e)=>this.props.changeRegion(e.target.value)}>\r\n                    <option value=\"\">National</option>\r\n                    {regionalData.map((data,index)=>{\r\n                        return <option key={index} value={data.region}>{data.region}</option>\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>)\r\n}\r\n}\r\nexport default Regions;","import React, { Component } from 'react';\r\nimport {Chart} from 'react-google-charts';\r\nimport {Paper} from '@material-ui/core';\r\nimport styles from './googleCharts.module.css';\r\n//import styles from './../Charts/GoogleCharts/googleCharts.module.css';\r\nclass PieChart extends Component{\r\n    render(){\r\n      console.log(this.props.regionData);\r\n      const regionalData=this.props.regionData;         \r\n        return <div className={styles.pieChartDimension}><Paper elevation={5}><Chart \r\n          width={'500px'}\r\n          height={'300px'}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={[\r\n            ['Cases', 'Numbers'],\r\n            ['Active', regionalData[0].totalInfected],\r\n            ['Deaths', regionalData[0].deceased],\r\n            ['Recovered', regionalData[0].recovered]   \r\n          ]}\r\n          options={{\r\n            title: `Current status in ${this.props.region}`,\r\n            is3D: true,\r\n          }}\r\n          rootProps={{ 'data-testid': '2' }}\r\n        /></Paper>\r\n        </div>\r\n    }\r\n}\r\nexport default PieChart;","import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport {Paper} from '@material-ui/core';\r\nclass ReactApexChart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props.chartData);\r\n        const activeSeries=props.chartData.map(({activeCases})=>activeCases);\r\n        const recoveredSeries=props.chartData.map(({recovered})=>recovered);\r\n        const confirmedSeries=props.chartData.map(({totalCases})=>totalCases);\r\n        const deathSeries=props.chartData.map(({deaths})=>deaths);\r\n        const categories=props.chartData.map(({lastUpdatedAtApify})=>lastUpdatedAtApify);\r\n        this.state = {          \r\n            series: [{\r\n              name: 'Active',\r\n              data: activeSeries\r\n            }, {\r\n              name: 'Recovered',\r\n              data: recoveredSeries\r\n            },\r\n            {\r\n                name: 'Confirmed',\r\n                data: confirmedSeries\r\n              },\r\n              {\r\n                name: 'Deaths',\r\n                data: deathSeries\r\n              },\r\n        ],\r\n            options: {\r\n              chart: {\r\n                height: '50%',\r\n                width:'50%',\r\n                type: 'line',\r\n                dropShadow: {\r\n                    enabled: true,\r\n                    color: '#000',\r\n                    top: 18,\r\n                    left: 7,\r\n                    blur: 10,\r\n                    opacity: 0.2\r\n                  },\r\n                  animations: {\r\n                    enabled: true,\r\n                    easing: 'easeinout',\r\n                    speed: 800,\r\n                    animateGradually: {\r\n                        enabled: true,\r\n                        delay: 150\r\n                    },\r\n                    dynamicAnimation: {\r\n                        enabled: true,\r\n                        speed: 350\r\n                    }\r\n                }\r\n              },\r\n              theme: {\r\n                palette: 'palette1' \r\n              },\r\n              dataLabels: {\r\n                enabled: false\r\n              },\r\n              stroke: {\r\n                curve: 'straight'              \r\n              },\r\n              title: {\r\n                text: 'Daily Count'\r\n              },\r\n              xaxis: {\r\n                type: 'datetime',\r\n                categories: categories\r\n              },             \r\n              responsive: [\r\n                {\r\n                  breakpoint: 1000,\r\n                  options: {\r\n                    plotOptions: {\r\n                      bar: {\r\n                        horizontal: false\r\n                      }\r\n                    },\r\n                    legend: {\r\n                      position: \"bottom\"\r\n                    }\r\n                  }\r\n                }\r\n              ],\r\n              tooltip: {\r\n                x: {\r\n                  format: 'dd/MM/yy HH:mm'\r\n                },\r\n              },\r\n            },\r\n          \r\n          \r\n          };\r\n    }\r\n    render(){\r\n        return <div className={styles.apexLineChartDimension}>\r\n            <Paper elevation={5}><Chart options={this.state.options} series={this.state.series} \r\n        type=\"line\"/>\r\n        </Paper>\r\n        </div>\r\n    }\r\n}\r\nexport default ReactApexChart;","import React, { Component } from 'react'\r\nimport Chart from 'react-apexcharts';\r\nimport styles from './googleCharts.module.css';\r\nimport {Paper} from '@material-ui/core';\r\nclass ApexLineChart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props.data.regionData);\r\n        const data = this.props.chartData;        \r\n        const categories=this.props.data.regionData.map(({region})=>region); \r\n        const colors = this.props.title === 'Deaths' ? ['#FF4500'] : \r\n        this.props.title === 'Recovered' ? ['lawngreen'] : \r\n        this.props.title === 'Active' ? ['#FFD700'] :\r\n        this.props.title === 'Confirmed'? ['cornflowerblue'] :[]\r\n        console.log(data);\r\n        const name='' ;  \r\n        this.state = {          \r\n            series: [{\r\n              name:name,\r\n              data: data\r\n            }],\r\n            options: {\r\n              chart: {\r\n                type: 'bar',\r\n                height: 1000,\r\n                stacked: true,\r\n                dropShadow: {\r\n                  enabled: true,\r\n                  color: '#000',\r\n                  top: 18,\r\n                  left: 7,\r\n                  blur: 10,\r\n                  opacity: 0.2\r\n                },                \r\n              },\r\n              legend:{\r\n                show:true,\r\n                showForNullSeries: true,\r\n                showForZeroSeries: true,\r\n                inverseOrder:true\r\n              },              \r\n              plotOptions: {\r\n                bar: {\r\n                  horizontal: true,\r\n                },                \r\n              },\r\n              dataLabels: {\r\n                enabled: false\r\n              },\r\n              title: {\r\n                text: `${this.props.title} count across the states`\r\n              },\r\n              xaxis: {\r\n                categories: categories,                \r\n              },                          \r\n              fill:{\r\n                colors:colors\r\n              }            \r\n            },                    \r\n          }; \r\n    }       \r\n    render(){        \r\n        return <div className={styles.apexLineChartDimension}>\r\n        <Paper elevation={5}><Chart options={this.state.options} series={this.state.series} type=\"bar\" \r\n        height={800} />\r\n        </Paper>                    \r\n        </div>\r\n    }\r\n}\r\nexport default ApexLineChart;","import React, {Component} from 'react';\n//import logo from './logo.svg';\n//import styles from './App.css';\nimport {fetchNationalData} from './API/index';\nimport NationalCards from './Cards/NationalCards';\nimport Regions from './Countries/States';\nimport PieChart from './ChartComponents/GooglePieChart';\nimport ReactApexChart from './ChartComponents/ReactApexChart';\nimport ApexLineChart from './ChartComponents/ApexLineChart';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n//import axios from 'axios';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      data:{},\n      region:'',\n      regionData:{},\n      historicData:[],\n      loading:true   \n    }\n    }\n  async componentDidMount(){\n    const data=await fetchNationalData();\n    console.log(data);\n    // const weeklyData=data[1].data.length? \n    // data[1].data.filter((hd,index)=> index % 7 === 0):null;\n    // console.log(weeklyData);\n    var sortedData=[];\n    if(data[1].data.length){      \n      sortedData=[...data[1].data].slice().sort();\n      console.log(sortedData);\n    }       \n    this.setState({data:data[0].data,historicData:sortedData,loading:false});\n  }\n\n  handleRegionChange=(region)=>{\n    if(region === \"National\"){\n      this.setState({\n        regionData:{}\n      })\n    }\n    else{\n      const prevData=this.state.data.regionData;\n      const regionData = prevData.filter(r=>r.region === region);\n      this.setState({\n        regionData:regionData,\n        region:region\n      })\n    }   \n  }\n  render(){\n    console.log(this.state.regionData);\n    console.log(this.state.historicData);    \n    const card= this.state.data.activeCases ? <NationalCards \n    regionData={this.state.regionData} data={this.state.data}/>:null;\n    const deceasedArray=this.state.data.hasOwnProperty('regionData') ? \n    this.state.data.regionData.map(({deceased})=>deceased):[];\n    const recoveredArray=this.state.data.hasOwnProperty('regionData') ? \n    this.state.data.regionData.map(({recovered})=>recovered):[];\n    const ActiveArray=this.state.data.hasOwnProperty('regionData') ? \n    this.state.data.regionData.map(({totalInfected})=>totalInfected):[];\n    const confirmedArray=this.state.data.hasOwnProperty('regionData') ? \n    this.state.data.regionData.map(({totalCases})=>totalCases):[];\n    const lineChartArray=this.state.data.hasOwnProperty('regionData') ?{\n      Deaths:deceasedArray,\n      Recovered:recoveredArray,\n      Active:ActiveArray,\n      Confirmed:confirmedArray\n    }:{};\n    console.log(Object.keys(lineChartArray));\n    return(\n      <div>\n        {this.state.loading ? <div style={{margin:'3%'}}><br/>Loading Please wait...<br/><LinearProgress color=\"secondary\" /></div> : null}        \n        {card}<br/> \n        {/* <Statistics/><br/> */}\n        {\n          this.state.data.hasOwnProperty('regionData')? \n          <Regions data={this.state.data} changeRegion={this.handleRegionChange}/>\n          :null\n        }\n        <br/>\n        <br/>\n        {Object.keys(this.state.regionData).length?         \n        <PieChart regionData={this.state.regionData} \n      region={this.state.region}/> : null }        \n        <br/>\n        <br/>\n        {          \n          this.state.historicData.length && !Object.keys(this.state.regionData).length ? \n          <ReactApexChart chartData={this.state.historicData}/> : null\n        }\n        <br/>\n        <br/>\n        {\n          this.state.data.hasOwnProperty('regionData') && !Object.keys(this.state.regionData).length?\n          Object.keys(lineChartArray).map((d,index)=>\n          <React.Fragment>\n          <ApexLineChart key={index} \n          title={d}\n          chartData={lineChartArray[`${d}`]} data={this.state.data}/><br/><br/>\n          </React.Fragment>):null\n            }                                          \n      </div>      \n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}